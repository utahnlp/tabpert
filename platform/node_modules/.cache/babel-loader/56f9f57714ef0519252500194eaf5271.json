{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { chainPropTypes } from '@material-ui/utils';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport InputBase from '../InputBase';\nimport MenuItem from '../MenuItem';\nimport Select from '../Select';\nimport TableCell from '../TableCell';\nimport Toolbar from '../Toolbar';\nimport Typography from '../Typography';\nimport TablePaginationActions from './TablePaginationActions';\nimport useId from '../utils/useId';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    color: theme.palette.text.primary,\n    fontSize: theme.typography.pxToRem(14),\n    overflow: 'auto',\n    // Increase the specificity to override TableCell.\n    '&:last-child': {\n      padding: 0\n    }\n  },\n\n  /* Styles applied to the Toolbar component. */\n  toolbar: {\n    minHeight: 52,\n    paddingRight: 2\n  },\n\n  /* Styles applied to the spacer element. */\n  spacer: {\n    flex: '1 1 100%'\n  },\n\n  /* Styles applied to the caption Typography components if `variant=\"caption\"`. */\n  caption: {\n    flexShrink: 0\n  },\n  // TODO v5: `.selectRoot` should be merged with `.input`\n\n  /* Styles applied to the Select component root element. */\n  selectRoot: {\n    marginRight: 32,\n    marginLeft: 8\n  },\n\n  /* Styles applied to the Select component `select` class. */\n  select: {\n    paddingLeft: 8,\n    paddingRight: 24,\n    textAlign: 'right',\n    textAlignLast: 'right' // Align <select> on Chrome.\n\n  },\n  // TODO v5: remove\n\n  /* Styles applied to the Select component `icon` class. */\n  selectIcon: {},\n\n  /* Styles applied to the `InputBase` component. */\n  input: {\n    color: 'inherit',\n    fontSize: 'inherit',\n    flexShrink: 0\n  },\n\n  /* Styles applied to the MenuItem component. */\n  menuItem: {},\n\n  /* Styles applied to the internal `TablePaginationActions` component. */\n  actions: {\n    flexShrink: 0,\n    marginLeft: 20\n  }\n});\n\nfunction defaultLabelDisplayedRows({\n  from,\n  to,\n  count\n}) {\n  return `${from}-${to} of ${count !== -1 ? count : `more than ${to}`}`;\n}\n\nfunction defaultGetAriaLabel(type) {\n  return `Go to ${type} page`;\n}\n/**\n * A `TableCell` based component for placing inside `TableFooter` for pagination.\n */\n\n\nconst TablePagination = /*#__PURE__*/React.forwardRef(function TablePagination(props, ref) {\n  const {\n    ActionsComponent = TablePaginationActions,\n    backIconButtonProps,\n    classes,\n    className,\n    colSpan: colSpanProp,\n    component: Component = TableCell,\n    count,\n    getItemAriaLabel = defaultGetAriaLabel,\n    labelDisplayedRows = defaultLabelDisplayedRows,\n    labelRowsPerPage = 'Rows per page:',\n    nextIconButtonProps,\n    onPageChange,\n    onRowsPerPageChange,\n    page,\n    rowsPerPage,\n    rowsPerPageOptions = [10, 25, 50, 100],\n    SelectProps = {},\n    showFirstButton = false,\n    showLastButton = false\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"ActionsComponent\", \"backIconButtonProps\", \"classes\", \"className\", \"colSpan\", \"component\", \"count\", \"getItemAriaLabel\", \"labelDisplayedRows\", \"labelRowsPerPage\", \"nextIconButtonProps\", \"onPageChange\", \"onRowsPerPageChange\", \"page\", \"rowsPerPage\", \"rowsPerPageOptions\", \"SelectProps\", \"showFirstButton\", \"showLastButton\"]);\n\n  let colSpan;\n\n  if (Component === TableCell || Component === 'td') {\n    colSpan = colSpanProp || 1000; // col-span over everything\n  }\n\n  const selectId = useId(SelectProps.id);\n  const labelId = useId(SelectProps.labelId);\n  const MenuItemComponent = SelectProps.native ? 'option' : MenuItem;\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    colSpan: colSpan,\n    ref: ref\n  }, other), /*#__PURE__*/React.createElement(Toolbar, {\n    className: classes.toolbar\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.spacer\n  }), rowsPerPageOptions.length > 1 && /*#__PURE__*/React.createElement(Typography, {\n    color: \"inherit\",\n    variant: \"body2\",\n    className: classes.caption,\n    id: labelId\n  }, labelRowsPerPage), rowsPerPageOptions.length > 1 && /*#__PURE__*/React.createElement(Select, _extends({\n    classes: {\n      select: classes.select,\n      icon: classes.selectIcon\n    },\n    input: /*#__PURE__*/React.createElement(InputBase, {\n      className: clsx(classes.input, classes.selectRoot)\n    }),\n    value: rowsPerPage,\n    onChange: onRowsPerPageChange,\n    id: selectId,\n    labelId: labelId\n  }, SelectProps), rowsPerPageOptions.map(rowsPerPageOption => /*#__PURE__*/React.createElement(MenuItemComponent, {\n    className: classes.menuItem,\n    key: rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption,\n    value: rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption\n  }, rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption))), /*#__PURE__*/React.createElement(Typography, {\n    color: \"inherit\",\n    variant: \"body2\",\n    className: classes.caption\n  }, labelDisplayedRows({\n    from: count === 0 ? 0 : page * rowsPerPage + 1,\n    to: count !== -1 ? Math.min(count, (page + 1) * rowsPerPage) : (page + 1) * rowsPerPage,\n    count: count === -1 ? -1 : count,\n    page\n  })), /*#__PURE__*/React.createElement(ActionsComponent, {\n    className: classes.actions,\n    backIconButtonProps: backIconButtonProps,\n    count: count,\n    nextIconButtonProps: nextIconButtonProps,\n    onPageChange: onPageChange,\n    page: page,\n    rowsPerPage: rowsPerPage,\n    showFirstButton: showFirstButton,\n    showLastButton: showLastButton,\n    getItemAriaLabel: getItemAriaLabel\n  })));\n});\nprocess.env.NODE_ENV !== \"production\" ? TablePagination.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The component used for displaying the actions.\n   * Either a string to use a HTML element or a component.\n   * @default TablePaginationActions\n   */\n  ActionsComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the back arrow [`IconButton`](/api/icon-button/) component.\n   */\n  backIconButtonProps: PropTypes.object,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  colSpan: PropTypes.number,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The total number of rows.\n   *\n   * To enable server side pagination for an unknown number of items, provide -1.\n   */\n  count: PropTypes.number.isRequired,\n\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the current page.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   *\n   * @param {string} type The link or button type to format ('first' | 'last' | 'next' | 'previous').\n   * @returns {string}\n   * @default function defaultGetAriaLabel(type) {\n   *   return `Go to ${type} page`;\n   * }\n   */\n  getItemAriaLabel: PropTypes.func,\n\n  /**\n   * Customize the displayed rows label. Invoked with a `{ from, to, count, page }`\n   * object.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default function defaultLabelDisplayedRows({ from, to, count }) {\n   *   return `${from}-${to} of ${count !== -1 ? count : `more than ${to}`}`;\n   * }\n   */\n  labelDisplayedRows: PropTypes.func,\n\n  /**\n   * Customize the rows per page label.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Rows per page:'\n   */\n  labelRowsPerPage: PropTypes.node,\n\n  /**\n   * Props applied to the next arrow [`IconButton`](/api/icon-button/) element.\n   */\n  nextIconButtonProps: PropTypes.object,\n\n  /**\n   * Callback fired when the page is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {number} page The page selected.\n   */\n  onPageChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the number of rows per page is changed.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onRowsPerPageChange: PropTypes.func,\n\n  /**\n   * The zero-based index of the current page.\n   */\n  page: chainPropTypes(PropTypes.number.isRequired, props => {\n    const {\n      count,\n      page,\n      rowsPerPage\n    } = props;\n\n    if (count === -1) {\n      return null;\n    }\n\n    const newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);\n\n    if (page < 0 || page > newLastPage) {\n      return new Error('Material-UI: The page prop of a TablePagination is out of range ' + `(0 to ${newLastPage}, but page is ${page}).`);\n    }\n\n    return null;\n  }),\n\n  /**\n   * The number of rows per page.\n   */\n  rowsPerPage: PropTypes.number.isRequired,\n\n  /**\n   * Customizes the options of the rows per page select field. If less than two options are\n   * available, no select field will be displayed.\n   * @default [10, 25, 50, 100]\n   */\n  rowsPerPageOptions: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    value: PropTypes.number.isRequired\n  })]).isRequired),\n\n  /**\n   * Props applied to the rows per page [`Select`](/api/select/) element.\n   * @default {}\n   */\n  SelectProps: PropTypes.object,\n\n  /**\n   * If `true`, show the first-page button.\n   * @default false\n   */\n  showFirstButton: PropTypes.bool,\n\n  /**\n   * If `true`, show the last-page button.\n   * @default false\n   */\n  showLastButton: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTablePagination'\n})(TablePagination);","map":{"version":3,"sources":["/home/nupur/infotabs-extension/infotabs-code/interface/frontend/node_modules/@material-ui/core/TablePagination/TablePagination.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","chainPropTypes","clsx","withStyles","InputBase","MenuItem","Select","TableCell","Toolbar","Typography","TablePaginationActions","useId","styles","theme","root","color","palette","text","primary","fontSize","typography","pxToRem","overflow","padding","toolbar","minHeight","paddingRight","spacer","flex","caption","flexShrink","selectRoot","marginRight","marginLeft","select","paddingLeft","textAlign","textAlignLast","selectIcon","input","menuItem","actions","defaultLabelDisplayedRows","from","to","count","defaultGetAriaLabel","type","TablePagination","forwardRef","props","ref","ActionsComponent","backIconButtonProps","classes","className","colSpan","colSpanProp","component","Component","getItemAriaLabel","labelDisplayedRows","labelRowsPerPage","nextIconButtonProps","onPageChange","onRowsPerPageChange","page","rowsPerPage","rowsPerPageOptions","SelectProps","showFirstButton","showLastButton","other","selectId","id","labelId","MenuItemComponent","native","createElement","length","variant","icon","value","onChange","map","rowsPerPageOption","key","label","Math","min","process","env","NODE_ENV","propTypes","elementType","object","string","number","isRequired","func","node","newLastPage","max","ceil","Error","arrayOf","oneOfType","shape","bool","name"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { chainPropTypes } from '@material-ui/utils';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport InputBase from '../InputBase';\nimport MenuItem from '../MenuItem';\nimport Select from '../Select';\nimport TableCell from '../TableCell';\nimport Toolbar from '../Toolbar';\nimport Typography from '../Typography';\nimport TablePaginationActions from './TablePaginationActions';\nimport useId from '../utils/useId';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    color: theme.palette.text.primary,\n    fontSize: theme.typography.pxToRem(14),\n    overflow: 'auto',\n    // Increase the specificity to override TableCell.\n    '&:last-child': {\n      padding: 0\n    }\n  },\n\n  /* Styles applied to the Toolbar component. */\n  toolbar: {\n    minHeight: 52,\n    paddingRight: 2\n  },\n\n  /* Styles applied to the spacer element. */\n  spacer: {\n    flex: '1 1 100%'\n  },\n\n  /* Styles applied to the caption Typography components if `variant=\"caption\"`. */\n  caption: {\n    flexShrink: 0\n  },\n  // TODO v5: `.selectRoot` should be merged with `.input`\n\n  /* Styles applied to the Select component root element. */\n  selectRoot: {\n    marginRight: 32,\n    marginLeft: 8\n  },\n\n  /* Styles applied to the Select component `select` class. */\n  select: {\n    paddingLeft: 8,\n    paddingRight: 24,\n    textAlign: 'right',\n    textAlignLast: 'right' // Align <select> on Chrome.\n\n  },\n  // TODO v5: remove\n\n  /* Styles applied to the Select component `icon` class. */\n  selectIcon: {},\n\n  /* Styles applied to the `InputBase` component. */\n  input: {\n    color: 'inherit',\n    fontSize: 'inherit',\n    flexShrink: 0\n  },\n\n  /* Styles applied to the MenuItem component. */\n  menuItem: {},\n\n  /* Styles applied to the internal `TablePaginationActions` component. */\n  actions: {\n    flexShrink: 0,\n    marginLeft: 20\n  }\n});\n\nfunction defaultLabelDisplayedRows({\n  from,\n  to,\n  count\n}) {\n  return `${from}-${to} of ${count !== -1 ? count : `more than ${to}`}`;\n}\n\nfunction defaultGetAriaLabel(type) {\n  return `Go to ${type} page`;\n}\n/**\n * A `TableCell` based component for placing inside `TableFooter` for pagination.\n */\n\n\nconst TablePagination = /*#__PURE__*/React.forwardRef(function TablePagination(props, ref) {\n  const {\n    ActionsComponent = TablePaginationActions,\n    backIconButtonProps,\n    classes,\n    className,\n    colSpan: colSpanProp,\n    component: Component = TableCell,\n    count,\n    getItemAriaLabel = defaultGetAriaLabel,\n    labelDisplayedRows = defaultLabelDisplayedRows,\n    labelRowsPerPage = 'Rows per page:',\n    nextIconButtonProps,\n    onPageChange,\n    onRowsPerPageChange,\n    page,\n    rowsPerPage,\n    rowsPerPageOptions = [10, 25, 50, 100],\n    SelectProps = {},\n    showFirstButton = false,\n    showLastButton = false\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"ActionsComponent\", \"backIconButtonProps\", \"classes\", \"className\", \"colSpan\", \"component\", \"count\", \"getItemAriaLabel\", \"labelDisplayedRows\", \"labelRowsPerPage\", \"nextIconButtonProps\", \"onPageChange\", \"onRowsPerPageChange\", \"page\", \"rowsPerPage\", \"rowsPerPageOptions\", \"SelectProps\", \"showFirstButton\", \"showLastButton\"]);\n\n  let colSpan;\n\n  if (Component === TableCell || Component === 'td') {\n    colSpan = colSpanProp || 1000; // col-span over everything\n  }\n\n  const selectId = useId(SelectProps.id);\n  const labelId = useId(SelectProps.labelId);\n  const MenuItemComponent = SelectProps.native ? 'option' : MenuItem;\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    colSpan: colSpan,\n    ref: ref\n  }, other), /*#__PURE__*/React.createElement(Toolbar, {\n    className: classes.toolbar\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.spacer\n  }), rowsPerPageOptions.length > 1 && /*#__PURE__*/React.createElement(Typography, {\n    color: \"inherit\",\n    variant: \"body2\",\n    className: classes.caption,\n    id: labelId\n  }, labelRowsPerPage), rowsPerPageOptions.length > 1 && /*#__PURE__*/React.createElement(Select, _extends({\n    classes: {\n      select: classes.select,\n      icon: classes.selectIcon\n    },\n    input: /*#__PURE__*/React.createElement(InputBase, {\n      className: clsx(classes.input, classes.selectRoot)\n    }),\n    value: rowsPerPage,\n    onChange: onRowsPerPageChange,\n    id: selectId,\n    labelId: labelId\n  }, SelectProps), rowsPerPageOptions.map(rowsPerPageOption => /*#__PURE__*/React.createElement(MenuItemComponent, {\n    className: classes.menuItem,\n    key: rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption,\n    value: rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption\n  }, rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption))), /*#__PURE__*/React.createElement(Typography, {\n    color: \"inherit\",\n    variant: \"body2\",\n    className: classes.caption\n  }, labelDisplayedRows({\n    from: count === 0 ? 0 : page * rowsPerPage + 1,\n    to: count !== -1 ? Math.min(count, (page + 1) * rowsPerPage) : (page + 1) * rowsPerPage,\n    count: count === -1 ? -1 : count,\n    page\n  })), /*#__PURE__*/React.createElement(ActionsComponent, {\n    className: classes.actions,\n    backIconButtonProps: backIconButtonProps,\n    count: count,\n    nextIconButtonProps: nextIconButtonProps,\n    onPageChange: onPageChange,\n    page: page,\n    rowsPerPage: rowsPerPage,\n    showFirstButton: showFirstButton,\n    showLastButton: showLastButton,\n    getItemAriaLabel: getItemAriaLabel\n  })));\n});\nprocess.env.NODE_ENV !== \"production\" ? TablePagination.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The component used for displaying the actions.\n   * Either a string to use a HTML element or a component.\n   * @default TablePaginationActions\n   */\n  ActionsComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the back arrow [`IconButton`](/api/icon-button/) component.\n   */\n  backIconButtonProps: PropTypes.object,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  colSpan: PropTypes.number,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The total number of rows.\n   *\n   * To enable server side pagination for an unknown number of items, provide -1.\n   */\n  count: PropTypes.number.isRequired,\n\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the current page.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   *\n   * @param {string} type The link or button type to format ('first' | 'last' | 'next' | 'previous').\n   * @returns {string}\n   * @default function defaultGetAriaLabel(type) {\n   *   return `Go to ${type} page`;\n   * }\n   */\n  getItemAriaLabel: PropTypes.func,\n\n  /**\n   * Customize the displayed rows label. Invoked with a `{ from, to, count, page }`\n   * object.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default function defaultLabelDisplayedRows({ from, to, count }) {\n   *   return `${from}-${to} of ${count !== -1 ? count : `more than ${to}`}`;\n   * }\n   */\n  labelDisplayedRows: PropTypes.func,\n\n  /**\n   * Customize the rows per page label.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Rows per page:'\n   */\n  labelRowsPerPage: PropTypes.node,\n\n  /**\n   * Props applied to the next arrow [`IconButton`](/api/icon-button/) element.\n   */\n  nextIconButtonProps: PropTypes.object,\n\n  /**\n   * Callback fired when the page is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {number} page The page selected.\n   */\n  onPageChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the number of rows per page is changed.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onRowsPerPageChange: PropTypes.func,\n\n  /**\n   * The zero-based index of the current page.\n   */\n  page: chainPropTypes(PropTypes.number.isRequired, props => {\n    const {\n      count,\n      page,\n      rowsPerPage\n    } = props;\n\n    if (count === -1) {\n      return null;\n    }\n\n    const newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);\n\n    if (page < 0 || page > newLastPage) {\n      return new Error('Material-UI: The page prop of a TablePagination is out of range ' + `(0 to ${newLastPage}, but page is ${page}).`);\n    }\n\n    return null;\n  }),\n\n  /**\n   * The number of rows per page.\n   */\n  rowsPerPage: PropTypes.number.isRequired,\n\n  /**\n   * Customizes the options of the rows per page select field. If less than two options are\n   * available, no select field will be displayed.\n   * @default [10, 25, 50, 100]\n   */\n  rowsPerPageOptions: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    value: PropTypes.number.isRequired\n  })]).isRequired),\n\n  /**\n   * Props applied to the rows per page [`Select`](/api/select/) element.\n   * @default {}\n   */\n  SelectProps: PropTypes.object,\n\n  /**\n   * If `true`, show the first-page button.\n   * @default false\n   */\n  showFirstButton: PropTypes.bool,\n\n  /**\n   * If `true`, show the last-page button.\n   * @default false\n   */\n  showLastButton: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTablePagination'\n})(TablePagination);"]},"metadata":{},"sourceType":"module"}