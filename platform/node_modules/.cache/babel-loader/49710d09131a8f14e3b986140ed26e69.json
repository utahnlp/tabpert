{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nimport BreadcrumbCollapsed from './BreadcrumbCollapsed';\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {},\n\n  /* Styles applied to the ol element. */\n  ol: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    padding: 0,\n    margin: 0,\n    listStyle: 'none'\n  },\n\n  /* Styles applied to the li element. */\n  li: {},\n\n  /* Styles applied to the separator element. */\n  separator: {\n    display: 'flex',\n    userSelect: 'none',\n    marginLeft: 8,\n    marginRight: 8\n  }\n};\n\nfunction insertSeparators(items, className, separator) {\n  return items.reduce((acc, current, index) => {\n    if (index < items.length - 1) {\n      acc = acc.concat(current, /*#__PURE__*/React.createElement(\"li\", {\n        \"aria-hidden\": true,\n        key: `separator-${index}`,\n        className: className\n      }, separator));\n    } else {\n      acc.push(current);\n    }\n\n    return acc;\n  }, []);\n}\n\nconst Breadcrumbs = /*#__PURE__*/React.forwardRef(function Breadcrumbs(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    component: Component = 'nav',\n    expandText = 'Show path',\n    itemsAfterCollapse = 1,\n    itemsBeforeCollapse = 1,\n    maxItems = 8,\n    separator = '/'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"classes\", \"className\", \"component\", \"expandText\", \"itemsAfterCollapse\", \"itemsBeforeCollapse\", \"maxItems\", \"separator\"]);\n\n  const [expanded, setExpanded] = React.useState(false);\n  const listRef = React.useRef(null);\n\n  const renderItemsBeforeAndAfter = allItems => {\n    const handleClickExpand = () => {\n      setExpanded(true); // The clicked element received the focus but gets removed from the DOM.\n      // Let's keep the focus in the component after expanding.\n      // Moving it the the <ol> or <nav> does not cause any announcement in NVDA.\n      // By moving it to some link/button at least we have some announcement.\n\n      const focusable = listRef.current.querySelector('a[href],button,[tabindex]');\n\n      if (focusable) {\n        focusable.focus();\n      }\n    }; // This defends against someone passing weird input, to ensure that if all\n    // items would be shown anyway, we just show all items without the EllipsisItem\n\n\n    if (itemsBeforeCollapse + itemsAfterCollapse >= allItems.length) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error(['Material-UI: You have provided an invalid combination of props to the Breadcrumbs.', `itemsAfterCollapse={${itemsAfterCollapse}} + itemsBeforeCollapse={${itemsBeforeCollapse}} >= maxItems={${maxItems}}`].join('\\n'));\n      }\n\n      return allItems;\n    }\n\n    return [...allItems.slice(0, itemsBeforeCollapse), /*#__PURE__*/React.createElement(BreadcrumbCollapsed, {\n      \"aria-label\": expandText,\n      key: \"ellipsis\",\n      onClick: handleClickExpand\n    }), ...allItems.slice(allItems.length - itemsAfterCollapse, allItems.length)];\n  };\n\n  const allItems = React.Children.toArray(children).filter(child => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: The Breadcrumbs component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    return /*#__PURE__*/React.isValidElement(child);\n  }).map((child, index) => /*#__PURE__*/React.createElement(\"li\", {\n    className: classes.li,\n    key: `child-${index}`\n  }, child));\n  return /*#__PURE__*/React.createElement(Typography, _extends({\n    ref: ref,\n    component: Component,\n    color: \"textSecondary\",\n    className: clsx(classes.root, className)\n  }, other), /*#__PURE__*/React.createElement(\"ol\", {\n    className: classes.ol,\n    ref: listRef\n  }, insertSeparators(expanded || maxItems && allItems.length <= maxItems ? allItems : renderItemsBeforeAndAfter(allItems), classes.separator, separator)));\n});\nprocess.env.NODE_ENV !== \"production\" ? Breadcrumbs.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The breadcrumb children.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Override the default label for the expand button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Show path'\n   */\n  expandText: PropTypes.string,\n\n  /**\n   * If max items is exceeded, the number of items to show after the ellipsis.\n   * @default 1\n   */\n  itemsAfterCollapse: PropTypes.number,\n\n  /**\n   * If max items is exceeded, the number of items to show before the ellipsis.\n   * @default 1\n   */\n  itemsBeforeCollapse: PropTypes.number,\n\n  /**\n   * Specifies the maximum number of breadcrumbs to display. When there are more\n   * than the maximum number, only the first `itemsBeforeCollapse` and last `itemsAfterCollapse`\n   * will be shown, with an ellipsis in between.\n   * @default 8\n   */\n  maxItems: PropTypes.number,\n\n  /**\n   * Custom separator node.\n   * @default '/'\n   */\n  separator: PropTypes.node\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiBreadcrumbs'\n})(Breadcrumbs);","map":{"version":3,"sources":["/home/nupur/infotabs-extension/infotabs-code/interface/frontend/node_modules/@material-ui/core/Breadcrumbs/Breadcrumbs.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","isFragment","PropTypes","clsx","withStyles","Typography","BreadcrumbCollapsed","styles","root","ol","display","flexWrap","alignItems","padding","margin","listStyle","li","separator","userSelect","marginLeft","marginRight","insertSeparators","items","className","reduce","acc","current","index","length","concat","createElement","key","push","Breadcrumbs","forwardRef","props","ref","children","classes","component","Component","expandText","itemsAfterCollapse","itemsBeforeCollapse","maxItems","other","expanded","setExpanded","useState","listRef","useRef","renderItemsBeforeAndAfter","allItems","handleClickExpand","focusable","querySelector","focus","process","env","NODE_ENV","console","error","join","slice","onClick","Children","toArray","filter","child","isValidElement","map","color","propTypes","node","object","string","elementType","number","name"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nimport BreadcrumbCollapsed from './BreadcrumbCollapsed';\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {},\n\n  /* Styles applied to the ol element. */\n  ol: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    padding: 0,\n    margin: 0,\n    listStyle: 'none'\n  },\n\n  /* Styles applied to the li element. */\n  li: {},\n\n  /* Styles applied to the separator element. */\n  separator: {\n    display: 'flex',\n    userSelect: 'none',\n    marginLeft: 8,\n    marginRight: 8\n  }\n};\n\nfunction insertSeparators(items, className, separator) {\n  return items.reduce((acc, current, index) => {\n    if (index < items.length - 1) {\n      acc = acc.concat(current, /*#__PURE__*/React.createElement(\"li\", {\n        \"aria-hidden\": true,\n        key: `separator-${index}`,\n        className: className\n      }, separator));\n    } else {\n      acc.push(current);\n    }\n\n    return acc;\n  }, []);\n}\n\nconst Breadcrumbs = /*#__PURE__*/React.forwardRef(function Breadcrumbs(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    component: Component = 'nav',\n    expandText = 'Show path',\n    itemsAfterCollapse = 1,\n    itemsBeforeCollapse = 1,\n    maxItems = 8,\n    separator = '/'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"classes\", \"className\", \"component\", \"expandText\", \"itemsAfterCollapse\", \"itemsBeforeCollapse\", \"maxItems\", \"separator\"]);\n\n  const [expanded, setExpanded] = React.useState(false);\n  const listRef = React.useRef(null);\n\n  const renderItemsBeforeAndAfter = allItems => {\n    const handleClickExpand = () => {\n      setExpanded(true); // The clicked element received the focus but gets removed from the DOM.\n      // Let's keep the focus in the component after expanding.\n      // Moving it the the <ol> or <nav> does not cause any announcement in NVDA.\n      // By moving it to some link/button at least we have some announcement.\n\n      const focusable = listRef.current.querySelector('a[href],button,[tabindex]');\n\n      if (focusable) {\n        focusable.focus();\n      }\n    }; // This defends against someone passing weird input, to ensure that if all\n    // items would be shown anyway, we just show all items without the EllipsisItem\n\n\n    if (itemsBeforeCollapse + itemsAfterCollapse >= allItems.length) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error(['Material-UI: You have provided an invalid combination of props to the Breadcrumbs.', `itemsAfterCollapse={${itemsAfterCollapse}} + itemsBeforeCollapse={${itemsBeforeCollapse}} >= maxItems={${maxItems}}`].join('\\n'));\n      }\n\n      return allItems;\n    }\n\n    return [...allItems.slice(0, itemsBeforeCollapse), /*#__PURE__*/React.createElement(BreadcrumbCollapsed, {\n      \"aria-label\": expandText,\n      key: \"ellipsis\",\n      onClick: handleClickExpand\n    }), ...allItems.slice(allItems.length - itemsAfterCollapse, allItems.length)];\n  };\n\n  const allItems = React.Children.toArray(children).filter(child => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: The Breadcrumbs component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    return /*#__PURE__*/React.isValidElement(child);\n  }).map((child, index) => /*#__PURE__*/React.createElement(\"li\", {\n    className: classes.li,\n    key: `child-${index}`\n  }, child));\n  return /*#__PURE__*/React.createElement(Typography, _extends({\n    ref: ref,\n    component: Component,\n    color: \"textSecondary\",\n    className: clsx(classes.root, className)\n  }, other), /*#__PURE__*/React.createElement(\"ol\", {\n    className: classes.ol,\n    ref: listRef\n  }, insertSeparators(expanded || maxItems && allItems.length <= maxItems ? allItems : renderItemsBeforeAndAfter(allItems), classes.separator, separator)));\n});\nprocess.env.NODE_ENV !== \"production\" ? Breadcrumbs.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The breadcrumb children.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Override the default label for the expand button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Show path'\n   */\n  expandText: PropTypes.string,\n\n  /**\n   * If max items is exceeded, the number of items to show after the ellipsis.\n   * @default 1\n   */\n  itemsAfterCollapse: PropTypes.number,\n\n  /**\n   * If max items is exceeded, the number of items to show before the ellipsis.\n   * @default 1\n   */\n  itemsBeforeCollapse: PropTypes.number,\n\n  /**\n   * Specifies the maximum number of breadcrumbs to display. When there are more\n   * than the maximum number, only the first `itemsBeforeCollapse` and last `itemsAfterCollapse`\n   * will be shown, with an ellipsis in between.\n   * @default 8\n   */\n  maxItems: PropTypes.number,\n\n  /**\n   * Custom separator node.\n   * @default '/'\n   */\n  separator: PropTypes.node\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiBreadcrumbs'\n})(Breadcrumbs);"]},"metadata":{},"sourceType":"module"}