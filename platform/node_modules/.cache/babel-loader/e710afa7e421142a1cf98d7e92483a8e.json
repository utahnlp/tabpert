{"ast":null,"code":"import merge from './merge';\n\nfunction compose(...styles) {\n  const fn = props => styles.reduce((acc, style) => {\n    const output = style(props);\n\n    if (output) {\n      return merge(acc, output);\n    }\n\n    return acc;\n  }, {}); // Alternative approach that doesn't yield any performance gain.\n  // const handlers = styles.reduce((acc, style) => {\n  //   style.filterProps.forEach(prop => {\n  //     acc[prop] = style;\n  //   });\n  //   return acc;\n  // }, {});\n  // const fn = props => {\n  //   return Object.keys(props).reduce((acc, prop) => {\n  //     if (handlers[prop]) {\n  //       return merge(acc, handlers[prop](props));\n  //     }\n  //     return acc;\n  //   }, {});\n  // };\n\n\n  fn.propTypes = process.env.NODE_ENV !== 'production' ? styles.reduce((acc, style) => Object.assign(acc, style.propTypes), {}) : {};\n  fn.filterProps = styles.reduce((acc, style) => acc.concat(style.filterProps), []);\n  return fn;\n}\n\nexport default compose;","map":{"version":3,"sources":["/home/nupur/infotabs-extension/infotabs-code/interface/frontend/node_modules/@material-ui/system/esm/compose.js"],"names":["merge","compose","styles","fn","props","reduce","acc","style","output","propTypes","process","env","NODE_ENV","Object","assign","filterProps","concat"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,SAAlB;;AAEA,SAASC,OAAT,CAAiB,GAAGC,MAApB,EAA4B;AAC1B,QAAMC,EAAE,GAAGC,KAAK,IAAIF,MAAM,CAACG,MAAP,CAAc,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAChD,UAAMC,MAAM,GAAGD,KAAK,CAACH,KAAD,CAApB;;AAEA,QAAII,MAAJ,EAAY;AACV,aAAOR,KAAK,CAACM,GAAD,EAAME,MAAN,CAAZ;AACD;;AAED,WAAOF,GAAP;AACD,GARmB,EAQjB,EARiB,CAApB,CAD0B,CASlB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGAH,EAAAA,EAAE,CAACM,SAAH,GAAeC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCV,MAAM,CAACG,MAAP,CAAc,CAACC,GAAD,EAAMC,KAAN,KAAgBM,MAAM,CAACC,MAAP,CAAcR,GAAd,EAAmBC,KAAK,CAACE,SAAzB,CAA9B,EAAmE,EAAnE,CAAxC,GAAiH,EAAhI;AACAN,EAAAA,EAAE,CAACY,WAAH,GAAiBb,MAAM,CAACG,MAAP,CAAc,CAACC,GAAD,EAAMC,KAAN,KAAgBD,GAAG,CAACU,MAAJ,CAAWT,KAAK,CAACQ,WAAjB,CAA9B,EAA6D,EAA7D,CAAjB;AACA,SAAOZ,EAAP;AACD;;AAED,eAAeF,OAAf","sourcesContent":["import merge from './merge';\n\nfunction compose(...styles) {\n  const fn = props => styles.reduce((acc, style) => {\n    const output = style(props);\n\n    if (output) {\n      return merge(acc, output);\n    }\n\n    return acc;\n  }, {}); // Alternative approach that doesn't yield any performance gain.\n  // const handlers = styles.reduce((acc, style) => {\n  //   style.filterProps.forEach(prop => {\n  //     acc[prop] = style;\n  //   });\n  //   return acc;\n  // }, {});\n  // const fn = props => {\n  //   return Object.keys(props).reduce((acc, prop) => {\n  //     if (handlers[prop]) {\n  //       return merge(acc, handlers[prop](props));\n  //     }\n  //     return acc;\n  //   }, {});\n  // };\n\n\n  fn.propTypes = process.env.NODE_ENV !== 'production' ? styles.reduce((acc, style) => Object.assign(acc, style.propTypes), {}) : {};\n  fn.filterProps = styles.reduce((acc, style) => acc.concat(style.filterProps), []);\n  return fn;\n}\n\nexport default compose;"]},"metadata":{},"sourceType":"module"}