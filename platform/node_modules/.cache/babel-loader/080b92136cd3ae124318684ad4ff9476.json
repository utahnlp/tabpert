{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nimport unsupportedProp from '../utils/unsupportedProp';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    transition: theme.transitions.create(['color', 'padding-top'], {\n      duration: theme.transitions.duration.short\n    }),\n    padding: '6px 12px 8px',\n    minWidth: 80,\n    maxWidth: 168,\n    color: theme.palette.text.secondary,\n    flex: '1',\n    '&$iconOnly': {\n      paddingTop: 16\n    },\n    '&$selected': {\n      paddingTop: 6,\n      color: theme.palette.primary.main\n    }\n  },\n\n  /* Pseudo-class applied to the root element if selected. */\n  selected: {},\n\n  /* Pseudo-class applied to the root element if `showLabel={false}` and not selected. */\n  iconOnly: {},\n\n  /* Styles applied to the span element that wraps the icon and label. */\n  wrapper: {\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: '100%',\n    flexDirection: 'column'\n  },\n\n  /* Styles applied to the label's span element. */\n  label: {\n    fontFamily: theme.typography.fontFamily,\n    fontSize: theme.typography.pxToRem(12),\n    opacity: 1,\n    transition: 'font-size 0.2s, opacity 0.2s',\n    transitionDelay: '0.1s',\n    '&$iconOnly': {\n      opacity: 0,\n      transitionDelay: '0s'\n    },\n    '&$selected': {\n      fontSize: theme.typography.pxToRem(14)\n    }\n  }\n});\nconst BottomNavigationAction = /*#__PURE__*/React.forwardRef(function BottomNavigationAction(props, ref) {\n  const {\n    classes,\n    className,\n    icon,\n    label,\n    onChange,\n    onTouchStart,\n    onTouchEnd,\n    onClick,\n    // eslint-disable-next-line react/prop-types -- private, always overridden by BottomNavigation\n    selected,\n    showLabel,\n    value\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"classes\", \"className\", \"icon\", \"label\", \"onChange\", \"onTouchStart\", \"onTouchEnd\", \"onClick\", \"selected\", \"showLabel\", \"value\"]);\n\n  const touchStartPos = React.useRef();\n  const touchTimer = React.useRef();\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(touchTimer.current);\n    };\n  }, [touchTimer]);\n\n  const handleTouchStart = event => {\n    if (onTouchStart) {\n      onTouchStart(event);\n    }\n\n    const {\n      clientX,\n      clientY\n    } = event.touches[0];\n    touchStartPos.current = {\n      clientX,\n      clientY\n    };\n  };\n\n  const handleTouchEnd = event => {\n    if (onTouchEnd) onTouchEnd(event);\n    const target = event.target;\n    const {\n      clientX,\n      clientY\n    } = event.changedTouches[0];\n\n    if (Math.abs(clientX - touchStartPos.current.clientX) < 10 && Math.abs(clientY - touchStartPos.current.clientY) < 10) {\n      touchTimer.current = setTimeout(() => {\n        // Simulate the native tap behavior on mobile.\n        // On the web, a tap won't trigger a click if a container is scrolling.\n        //\n        // Note that the synthetic behavior won't trigger a native <a> nor\n        // it will trigger a click at all on iOS.\n        target.dispatchEvent(new Event('click', {\n          bubbles: true\n        }));\n      }, 10);\n    }\n  };\n\n  const handleChange = event => {\n    clearTimeout(touchTimer.current);\n\n    if (onChange) {\n      onChange(event, value);\n    }\n\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ButtonBase, _extends({\n    ref: ref,\n    className: clsx(classes.root, className, selected ? classes.selected : !showLabel && classes.iconOnly),\n    focusRipple: true,\n    onClick: handleChange,\n    onTouchStart: handleTouchStart,\n    onTouchEnd: handleTouchEnd\n  }, other), /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.wrapper\n  }, icon, /*#__PURE__*/React.createElement(\"span\", {\n    className: clsx(classes.label, selected ? classes.selected : !showLabel && classes.iconOnly)\n  }, label)));\n});\nprocess.env.NODE_ENV !== \"production\" ? BottomNavigationAction.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * This prop isn't supported.\n   * Use the `component` prop if you need to change the children structure.\n   */\n  children: unsupportedProp,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon element.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The label element.\n   */\n  label: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onTouchEnd: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onTouchStart: PropTypes.func,\n\n  /**\n   * If `true`, the `BottomNavigationAction` will show its label.\n   * By default, only the selected `BottomNavigationAction`\n   * inside `BottomNavigation` will show its label.\n   *\n   * The prop defaults to the value (`false`) inherited from the parent BottomNavigation component.\n   */\n  showLabel: PropTypes.bool,\n\n  /**\n   * You can provide your own value. Otherwise, we fallback to the child position index.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiBottomNavigationAction'\n})(BottomNavigationAction);","map":{"version":3,"sources":["/home/nupur/infotabs-extension/infotabs-code/interface/frontend/node_modules/@material-ui/core/BottomNavigationAction/BottomNavigationAction.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","clsx","withStyles","ButtonBase","unsupportedProp","styles","theme","root","transition","transitions","create","duration","short","padding","minWidth","maxWidth","color","palette","text","secondary","flex","paddingTop","primary","main","selected","iconOnly","wrapper","display","alignItems","justifyContent","width","flexDirection","label","fontFamily","typography","fontSize","pxToRem","opacity","transitionDelay","BottomNavigationAction","forwardRef","props","ref","classes","className","icon","onChange","onTouchStart","onTouchEnd","onClick","showLabel","value","other","touchStartPos","useRef","touchTimer","useEffect","clearTimeout","current","handleTouchStart","event","clientX","clientY","touches","handleTouchEnd","target","changedTouches","Math","abs","setTimeout","dispatchEvent","Event","bubbles","handleChange","createElement","focusRipple","process","env","NODE_ENV","propTypes","children","object","string","node","func","bool","any","name"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nimport unsupportedProp from '../utils/unsupportedProp';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    transition: theme.transitions.create(['color', 'padding-top'], {\n      duration: theme.transitions.duration.short\n    }),\n    padding: '6px 12px 8px',\n    minWidth: 80,\n    maxWidth: 168,\n    color: theme.palette.text.secondary,\n    flex: '1',\n    '&$iconOnly': {\n      paddingTop: 16\n    },\n    '&$selected': {\n      paddingTop: 6,\n      color: theme.palette.primary.main\n    }\n  },\n\n  /* Pseudo-class applied to the root element if selected. */\n  selected: {},\n\n  /* Pseudo-class applied to the root element if `showLabel={false}` and not selected. */\n  iconOnly: {},\n\n  /* Styles applied to the span element that wraps the icon and label. */\n  wrapper: {\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: '100%',\n    flexDirection: 'column'\n  },\n\n  /* Styles applied to the label's span element. */\n  label: {\n    fontFamily: theme.typography.fontFamily,\n    fontSize: theme.typography.pxToRem(12),\n    opacity: 1,\n    transition: 'font-size 0.2s, opacity 0.2s',\n    transitionDelay: '0.1s',\n    '&$iconOnly': {\n      opacity: 0,\n      transitionDelay: '0s'\n    },\n    '&$selected': {\n      fontSize: theme.typography.pxToRem(14)\n    }\n  }\n});\nconst BottomNavigationAction = /*#__PURE__*/React.forwardRef(function BottomNavigationAction(props, ref) {\n  const {\n    classes,\n    className,\n    icon,\n    label,\n    onChange,\n    onTouchStart,\n    onTouchEnd,\n    onClick,\n    // eslint-disable-next-line react/prop-types -- private, always overridden by BottomNavigation\n    selected,\n    showLabel,\n    value\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"classes\", \"className\", \"icon\", \"label\", \"onChange\", \"onTouchStart\", \"onTouchEnd\", \"onClick\", \"selected\", \"showLabel\", \"value\"]);\n\n  const touchStartPos = React.useRef();\n  const touchTimer = React.useRef();\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(touchTimer.current);\n    };\n  }, [touchTimer]);\n\n  const handleTouchStart = event => {\n    if (onTouchStart) {\n      onTouchStart(event);\n    }\n\n    const {\n      clientX,\n      clientY\n    } = event.touches[0];\n    touchStartPos.current = {\n      clientX,\n      clientY\n    };\n  };\n\n  const handleTouchEnd = event => {\n    if (onTouchEnd) onTouchEnd(event);\n    const target = event.target;\n    const {\n      clientX,\n      clientY\n    } = event.changedTouches[0];\n\n    if (Math.abs(clientX - touchStartPos.current.clientX) < 10 && Math.abs(clientY - touchStartPos.current.clientY) < 10) {\n      touchTimer.current = setTimeout(() => {\n        // Simulate the native tap behavior on mobile.\n        // On the web, a tap won't trigger a click if a container is scrolling.\n        //\n        // Note that the synthetic behavior won't trigger a native <a> nor\n        // it will trigger a click at all on iOS.\n        target.dispatchEvent(new Event('click', {\n          bubbles: true\n        }));\n      }, 10);\n    }\n  };\n\n  const handleChange = event => {\n    clearTimeout(touchTimer.current);\n\n    if (onChange) {\n      onChange(event, value);\n    }\n\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ButtonBase, _extends({\n    ref: ref,\n    className: clsx(classes.root, className, selected ? classes.selected : !showLabel && classes.iconOnly),\n    focusRipple: true,\n    onClick: handleChange,\n    onTouchStart: handleTouchStart,\n    onTouchEnd: handleTouchEnd\n  }, other), /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.wrapper\n  }, icon, /*#__PURE__*/React.createElement(\"span\", {\n    className: clsx(classes.label, selected ? classes.selected : !showLabel && classes.iconOnly)\n  }, label)));\n});\nprocess.env.NODE_ENV !== \"production\" ? BottomNavigationAction.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * This prop isn't supported.\n   * Use the `component` prop if you need to change the children structure.\n   */\n  children: unsupportedProp,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon element.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The label element.\n   */\n  label: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onTouchEnd: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onTouchStart: PropTypes.func,\n\n  /**\n   * If `true`, the `BottomNavigationAction` will show its label.\n   * By default, only the selected `BottomNavigationAction`\n   * inside `BottomNavigation` will show its label.\n   *\n   * The prop defaults to the value (`false`) inherited from the parent BottomNavigation component.\n   */\n  showLabel: PropTypes.bool,\n\n  /**\n   * You can provide your own value. Otherwise, we fallback to the child position index.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiBottomNavigationAction'\n})(BottomNavigationAction);"]},"metadata":{},"sourceType":"module"}