{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@material-ui/utils\";\nimport { deepmerge } from '@material-ui/utils';\nimport common from '../colors/common';\nimport grey from '../colors/grey';\nimport indigo from '../colors/indigo';\nimport pink from '../colors/pink';\nimport red from '../colors/red';\nimport orange from '../colors/orange';\nimport blue from '../colors/blue';\nimport green from '../colors/green';\nimport { darken, getContrastRatio, lighten } from './colorManipulator';\nexport const light = {\n  // The colors used to style the text.\n  text: {\n    // The most important text.\n    primary: 'rgba(0, 0, 0, 0.87)',\n    // Secondary text.\n    secondary: 'rgba(0, 0, 0, 0.54)',\n    // Disabled text have even lower visual prominence.\n    disabled: 'rgba(0, 0, 0, 0.38)'\n  },\n  // The color used to divide different elements.\n  divider: 'rgba(0, 0, 0, 0.12)',\n  // The background colors used to style the surfaces.\n  // Consistency between these values is important.\n  background: {\n    paper: common.white,\n    default: grey[50]\n  },\n  // The colors used to style the action elements.\n  action: {\n    // The color of an active action like an icon button.\n    active: 'rgba(0, 0, 0, 0.54)',\n    // The color of an hovered action.\n    hover: 'rgba(0, 0, 0, 0.04)',\n    hoverOpacity: 0.04,\n    // The color of a selected action.\n    selected: 'rgba(0, 0, 0, 0.08)',\n    selectedOpacity: 0.08,\n    // The color of a disabled action.\n    disabled: 'rgba(0, 0, 0, 0.26)',\n    // The background color of a disabled action.\n    disabledBackground: 'rgba(0, 0, 0, 0.12)',\n    disabledOpacity: 0.38,\n    focus: 'rgba(0, 0, 0, 0.12)',\n    focusOpacity: 0.12,\n    activatedOpacity: 0.12\n  }\n};\nexport const dark = {\n  text: {\n    primary: common.white,\n    secondary: 'rgba(255, 255, 255, 0.7)',\n    disabled: 'rgba(255, 255, 255, 0.5)',\n    icon: 'rgba(255, 255, 255, 0.5)'\n  },\n  divider: 'rgba(255, 255, 255, 0.12)',\n  background: {\n    paper: grey[800],\n    default: '#303030'\n  },\n  action: {\n    active: common.white,\n    hover: 'rgba(255, 255, 255, 0.08)',\n    hoverOpacity: 0.08,\n    selected: 'rgba(255, 255, 255, 0.16)',\n    selectedOpacity: 0.16,\n    disabled: 'rgba(255, 255, 255, 0.3)',\n    disabledBackground: 'rgba(255, 255, 255, 0.12)',\n    disabledOpacity: 0.38,\n    focus: 'rgba(255, 255, 255, 0.12)',\n    focusOpacity: 0.12,\n    activatedOpacity: 0.24\n  }\n};\n\nfunction addLightOrDark(intent, direction, shade, tonalOffset) {\n  const tonalOffsetLight = tonalOffset.light || tonalOffset;\n  const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;\n\n  if (!intent[direction]) {\n    if (intent.hasOwnProperty(shade)) {\n      intent[direction] = intent[shade];\n    } else if (direction === 'light') {\n      intent.light = lighten(intent.main, tonalOffsetLight);\n    } else if (direction === 'dark') {\n      intent.dark = darken(intent.main, tonalOffsetDark);\n    }\n  }\n}\n\nexport default function createPalette(palette) {\n  const {\n    primary = {\n      light: indigo[300],\n      main: indigo[500],\n      dark: indigo[700]\n    },\n    secondary = {\n      light: pink.A200,\n      main: pink.A400,\n      dark: pink.A700\n    },\n    error = {\n      light: red[300],\n      main: red[500],\n      dark: red[700]\n    },\n    warning = {\n      light: orange[300],\n      main: orange[500],\n      dark: orange[700]\n    },\n    info = {\n      light: blue[300],\n      main: blue[500],\n      dark: blue[700]\n    },\n    success = {\n      light: green[300],\n      main: green[500],\n      dark: green[700]\n    },\n    mode = 'light',\n    contrastThreshold = 3,\n    tonalOffset = 0.2\n  } = palette,\n        other = _objectWithoutPropertiesLoose(palette, [\"primary\", \"secondary\", \"error\", \"warning\", \"info\", \"success\", \"mode\", \"contrastThreshold\", \"tonalOffset\"]); // Use the same logic as\n  // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59\n  // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54\n\n\n  function getContrastText(background) {\n    const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;\n\n    if (process.env.NODE_ENV !== 'production') {\n      const contrast = getContrastRatio(background, contrastText);\n\n      if (contrast < 3) {\n        console.error([`Material-UI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\\n'));\n      }\n    }\n\n    return contrastText;\n  }\n\n  const augmentColor = (color, mainShade = 500, lightShade = 300, darkShade = 700) => {\n    color = _extends({}, color);\n\n    if (!color.main && color[mainShade]) {\n      color.main = color[mainShade];\n    }\n\n    if (!color.main) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `Material-UI: The color provided to augmentColor(color) is invalid.\nThe color object needs to have a \\`main\\` property or a \\`${mainShade}\\` property.` : _formatMuiErrorMessage(4, mainShade));\n    }\n\n    if (typeof color.main !== 'string') {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `Material-UI: The color provided to augmentColor(color) is invalid.\n\\`color.main\\` should be a string, but \\`${JSON.stringify(color.main)}\\` was provided instead.\n\nDid you intend to use one of the following approaches?\n\nimport {Â green } from \"@material-ui/core/colors\";\n\nconst theme1 = createMuiTheme({ palette: {\n  primary: green,\n} });\n\nconst theme2 = createMuiTheme({ palette: {\n  primary: { main: green[500] },\n} });` : _formatMuiErrorMessage(5, JSON.stringify(color.main)));\n    }\n\n    addLightOrDark(color, 'light', lightShade, tonalOffset);\n    addLightOrDark(color, 'dark', darkShade, tonalOffset);\n\n    if (!color.contrastText) {\n      color.contrastText = getContrastText(color.main);\n    }\n\n    return color;\n  };\n\n  const modes = {\n    dark,\n    light\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!modes[mode]) {\n      console.error(`Material-UI: The palette mode \\`${mode}\\` is not supported.`);\n    }\n  }\n\n  const paletteOutput = deepmerge(_extends({\n    // A collection of common colors.\n    common,\n    // The palette mode, can be light or dark.\n    mode,\n    // The colors used to represent primary interface elements for a user.\n    primary: augmentColor(primary),\n    // The colors used to represent secondary interface elements for a user.\n    secondary: augmentColor(secondary, 'A400', 'A200', 'A700'),\n    // The colors used to represent interface elements that the user should be made aware of.\n    error: augmentColor(error),\n    // The colors used to represent potentially dangerous actions or important messages.\n    warning: augmentColor(warning),\n    // The colors used to present information to the user that is neutral and not necessarily important.\n    info: augmentColor(info),\n    // The colors used to indicate the successful completion of an action that user triggered.\n    success: augmentColor(success),\n    // The grey colors.\n    grey,\n    // Used by `getContrastText()` to maximize the contrast between\n    // the background and the text.\n    contrastThreshold,\n    // Takes a background color and returns the text color that maximizes the contrast.\n    getContrastText,\n    // Generate a rich color object.\n    augmentColor,\n    // Used by the functions below to shift a color's luminance by approximately\n    // two indexes within its tonal palette.\n    // E.g., shift from Red 500 to Red 300 or Red 700.\n    tonalOffset\n  }, modes[mode]), other);\n  return paletteOutput;\n}","map":{"version":3,"sources":["/home/nupur/infotabs-extension/infotabs-code/interface/frontend/node_modules/@material-ui/core/styles/createPalette.js"],"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","deepmerge","common","grey","indigo","pink","red","orange","blue","green","darken","getContrastRatio","lighten","light","text","primary","secondary","disabled","divider","background","paper","white","default","action","active","hover","hoverOpacity","selected","selectedOpacity","disabledBackground","disabledOpacity","focus","focusOpacity","activatedOpacity","dark","icon","addLightOrDark","intent","direction","shade","tonalOffset","tonalOffsetLight","tonalOffsetDark","hasOwnProperty","main","createPalette","palette","A200","A400","A700","error","warning","info","success","mode","contrastThreshold","other","getContrastText","contrastText","process","env","NODE_ENV","contrast","console","join","augmentColor","color","mainShade","lightShade","darkShade","Error","JSON","stringify","modes","paletteOutput"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,SAASC,qBAAqB,IAAIC,sBAAlC,QAAgE,oBAAhE;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,GAAP,MAAgB,eAAhB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,SAASC,MAAT,EAAiBC,gBAAjB,EAAmCC,OAAnC,QAAkD,oBAAlD;AACA,OAAO,MAAMC,KAAK,GAAG;AACnB;AACAC,EAAAA,IAAI,EAAE;AACJ;AACAC,IAAAA,OAAO,EAAE,qBAFL;AAGJ;AACAC,IAAAA,SAAS,EAAE,qBAJP;AAKJ;AACAC,IAAAA,QAAQ,EAAE;AANN,GAFa;AAUnB;AACAC,EAAAA,OAAO,EAAE,qBAXU;AAYnB;AACA;AACAC,EAAAA,UAAU,EAAE;AACVC,IAAAA,KAAK,EAAElB,MAAM,CAACmB,KADJ;AAEVC,IAAAA,OAAO,EAAEnB,IAAI,CAAC,EAAD;AAFH,GAdO;AAkBnB;AACAoB,EAAAA,MAAM,EAAE;AACN;AACAC,IAAAA,MAAM,EAAE,qBAFF;AAGN;AACAC,IAAAA,KAAK,EAAE,qBAJD;AAKNC,IAAAA,YAAY,EAAE,IALR;AAMN;AACAC,IAAAA,QAAQ,EAAE,qBAPJ;AAQNC,IAAAA,eAAe,EAAE,IARX;AASN;AACAX,IAAAA,QAAQ,EAAE,qBAVJ;AAWN;AACAY,IAAAA,kBAAkB,EAAE,qBAZd;AAaNC,IAAAA,eAAe,EAAE,IAbX;AAcNC,IAAAA,KAAK,EAAE,qBAdD;AAeNC,IAAAA,YAAY,EAAE,IAfR;AAgBNC,IAAAA,gBAAgB,EAAE;AAhBZ;AAnBW,CAAd;AAsCP,OAAO,MAAMC,IAAI,GAAG;AAClBpB,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAEb,MAAM,CAACmB,KADZ;AAEJL,IAAAA,SAAS,EAAE,0BAFP;AAGJC,IAAAA,QAAQ,EAAE,0BAHN;AAIJkB,IAAAA,IAAI,EAAE;AAJF,GADY;AAOlBjB,EAAAA,OAAO,EAAE,2BAPS;AAQlBC,EAAAA,UAAU,EAAE;AACVC,IAAAA,KAAK,EAAEjB,IAAI,CAAC,GAAD,CADD;AAEVmB,IAAAA,OAAO,EAAE;AAFC,GARM;AAYlBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,MAAM,EAAEtB,MAAM,CAACmB,KADT;AAENI,IAAAA,KAAK,EAAE,2BAFD;AAGNC,IAAAA,YAAY,EAAE,IAHR;AAINC,IAAAA,QAAQ,EAAE,2BAJJ;AAKNC,IAAAA,eAAe,EAAE,IALX;AAMNX,IAAAA,QAAQ,EAAE,0BANJ;AAONY,IAAAA,kBAAkB,EAAE,2BAPd;AAQNC,IAAAA,eAAe,EAAE,IARX;AASNC,IAAAA,KAAK,EAAE,2BATD;AAUNC,IAAAA,YAAY,EAAE,IAVR;AAWNC,IAAAA,gBAAgB,EAAE;AAXZ;AAZU,CAAb;;AA2BP,SAASG,cAAT,CAAwBC,MAAxB,EAAgCC,SAAhC,EAA2CC,KAA3C,EAAkDC,WAAlD,EAA+D;AAC7D,QAAMC,gBAAgB,GAAGD,WAAW,CAAC3B,KAAZ,IAAqB2B,WAA9C;AACA,QAAME,eAAe,GAAGF,WAAW,CAACN,IAAZ,IAAoBM,WAAW,GAAG,GAA1D;;AAEA,MAAI,CAACH,MAAM,CAACC,SAAD,CAAX,EAAwB;AACtB,QAAID,MAAM,CAACM,cAAP,CAAsBJ,KAAtB,CAAJ,EAAkC;AAChCF,MAAAA,MAAM,CAACC,SAAD,CAAN,GAAoBD,MAAM,CAACE,KAAD,CAA1B;AACD,KAFD,MAEO,IAAID,SAAS,KAAK,OAAlB,EAA2B;AAChCD,MAAAA,MAAM,CAACxB,KAAP,GAAeD,OAAO,CAACyB,MAAM,CAACO,IAAR,EAAcH,gBAAd,CAAtB;AACD,KAFM,MAEA,IAAIH,SAAS,KAAK,MAAlB,EAA0B;AAC/BD,MAAAA,MAAM,CAACH,IAAP,GAAcxB,MAAM,CAAC2B,MAAM,CAACO,IAAR,EAAcF,eAAd,CAApB;AACD;AACF;AACF;;AAED,eAAe,SAASG,aAAT,CAAuBC,OAAvB,EAAgC;AAC7C,QAAM;AACJ/B,IAAAA,OAAO,GAAG;AACRF,MAAAA,KAAK,EAAET,MAAM,CAAC,GAAD,CADL;AAERwC,MAAAA,IAAI,EAAExC,MAAM,CAAC,GAAD,CAFJ;AAGR8B,MAAAA,IAAI,EAAE9B,MAAM,CAAC,GAAD;AAHJ,KADN;AAMJY,IAAAA,SAAS,GAAG;AACVH,MAAAA,KAAK,EAAER,IAAI,CAAC0C,IADF;AAEVH,MAAAA,IAAI,EAAEvC,IAAI,CAAC2C,IAFD;AAGVd,MAAAA,IAAI,EAAE7B,IAAI,CAAC4C;AAHD,KANR;AAWJC,IAAAA,KAAK,GAAG;AACNrC,MAAAA,KAAK,EAAEP,GAAG,CAAC,GAAD,CADJ;AAENsC,MAAAA,IAAI,EAAEtC,GAAG,CAAC,GAAD,CAFH;AAGN4B,MAAAA,IAAI,EAAE5B,GAAG,CAAC,GAAD;AAHH,KAXJ;AAgBJ6C,IAAAA,OAAO,GAAG;AACRtC,MAAAA,KAAK,EAAEN,MAAM,CAAC,GAAD,CADL;AAERqC,MAAAA,IAAI,EAAErC,MAAM,CAAC,GAAD,CAFJ;AAGR2B,MAAAA,IAAI,EAAE3B,MAAM,CAAC,GAAD;AAHJ,KAhBN;AAqBJ6C,IAAAA,IAAI,GAAG;AACLvC,MAAAA,KAAK,EAAEL,IAAI,CAAC,GAAD,CADN;AAELoC,MAAAA,IAAI,EAAEpC,IAAI,CAAC,GAAD,CAFL;AAGL0B,MAAAA,IAAI,EAAE1B,IAAI,CAAC,GAAD;AAHL,KArBH;AA0BJ6C,IAAAA,OAAO,GAAG;AACRxC,MAAAA,KAAK,EAAEJ,KAAK,CAAC,GAAD,CADJ;AAERmC,MAAAA,IAAI,EAAEnC,KAAK,CAAC,GAAD,CAFH;AAGRyB,MAAAA,IAAI,EAAEzB,KAAK,CAAC,GAAD;AAHH,KA1BN;AA+BJ6C,IAAAA,IAAI,GAAG,OA/BH;AAgCJC,IAAAA,iBAAiB,GAAG,CAhChB;AAiCJf,IAAAA,WAAW,GAAG;AAjCV,MAkCFM,OAlCJ;AAAA,QAmCMU,KAAK,GAAG1D,6BAA6B,CAACgD,OAAD,EAAU,CAAC,SAAD,EAAY,WAAZ,EAAyB,OAAzB,EAAkC,SAAlC,EAA6C,MAA7C,EAAqD,SAArD,EAAgE,MAAhE,EAAwE,mBAAxE,EAA6F,aAA7F,CAAV,CAnC3C,CAD6C,CAoCsH;AACnK;AACA;;;AAGA,WAASW,eAAT,CAAyBtC,UAAzB,EAAqC;AACnC,UAAMuC,YAAY,GAAG/C,gBAAgB,CAACQ,UAAD,EAAae,IAAI,CAACpB,IAAL,CAAUC,OAAvB,CAAhB,IAAmDwC,iBAAnD,GAAuErB,IAAI,CAACpB,IAAL,CAAUC,OAAjF,GAA2FF,KAAK,CAACC,IAAN,CAAWC,OAA3H;;AAEA,QAAI4C,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,YAAMC,QAAQ,GAAGnD,gBAAgB,CAACQ,UAAD,EAAauC,YAAb,CAAjC;;AAEA,UAAII,QAAQ,GAAG,CAAf,EAAkB;AAChBC,QAAAA,OAAO,CAACb,KAAR,CAAc,CAAE,sCAAqCY,QAAS,UAASJ,YAAa,OAAMvC,UAAW,EAAvF,EAA0F,0EAA1F,EAAsK,gFAAtK,EAAwP6C,IAAxP,CAA6P,IAA7P,CAAd;AACD;AACF;;AAED,WAAON,YAAP;AACD;;AAED,QAAMO,YAAY,GAAG,CAACC,KAAD,EAAQC,SAAS,GAAG,GAApB,EAAyBC,UAAU,GAAG,GAAtC,EAA2CC,SAAS,GAAG,GAAvD,KAA+D;AAClFH,IAAAA,KAAK,GAAGrE,QAAQ,CAAC,EAAD,EAAKqE,KAAL,CAAhB;;AAEA,QAAI,CAACA,KAAK,CAACtB,IAAP,IAAesB,KAAK,CAACC,SAAD,CAAxB,EAAqC;AACnCD,MAAAA,KAAK,CAACtB,IAAN,GAAasB,KAAK,CAACC,SAAD,CAAlB;AACD;;AAED,QAAI,CAACD,KAAK,CAACtB,IAAX,EAAiB;AACf,YAAM,IAAI0B,KAAJ,CAAUX,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAyC;4DACHM,SAAU,cADhD,GACgEnE,sBAAsB,CAAC,CAAD,EAAImE,SAAJ,CADhG,CAAN;AAED;;AAED,QAAI,OAAOD,KAAK,CAACtB,IAAb,KAAsB,QAA1B,EAAoC;AAClC,YAAM,IAAI0B,KAAJ,CAAUX,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAyC;2CACpBU,IAAI,CAACC,SAAL,CAAeN,KAAK,CAACtB,IAArB,CAA2B;;;;;;;;;;;;MADhD,GAab5C,sBAAsB,CAAC,CAAD,EAAIuE,IAAI,CAACC,SAAL,CAAeN,KAAK,CAACtB,IAArB,CAAJ,CAbnB,CAAN;AAcD;;AAEDR,IAAAA,cAAc,CAAC8B,KAAD,EAAQ,OAAR,EAAiBE,UAAjB,EAA6B5B,WAA7B,CAAd;AACAJ,IAAAA,cAAc,CAAC8B,KAAD,EAAQ,MAAR,EAAgBG,SAAhB,EAA2B7B,WAA3B,CAAd;;AAEA,QAAI,CAAC0B,KAAK,CAACR,YAAX,EAAyB;AACvBQ,MAAAA,KAAK,CAACR,YAAN,GAAqBD,eAAe,CAACS,KAAK,CAACtB,IAAP,CAApC;AACD;;AAED,WAAOsB,KAAP;AACD,GArCD;;AAuCA,QAAMO,KAAK,GAAG;AACZvC,IAAAA,IADY;AAEZrB,IAAAA;AAFY,GAAd;;AAKA,MAAI8C,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,QAAI,CAACY,KAAK,CAACnB,IAAD,CAAV,EAAkB;AAChBS,MAAAA,OAAO,CAACb,KAAR,CAAe,mCAAkCI,IAAK,sBAAtD;AACD;AACF;;AAED,QAAMoB,aAAa,GAAGzE,SAAS,CAACJ,QAAQ,CAAC;AACvC;AACAK,IAAAA,MAFuC;AAGvC;AACAoD,IAAAA,IAJuC;AAKvC;AACAvC,IAAAA,OAAO,EAAEkD,YAAY,CAAClD,OAAD,CANkB;AAOvC;AACAC,IAAAA,SAAS,EAAEiD,YAAY,CAACjD,SAAD,EAAY,MAAZ,EAAoB,MAApB,EAA4B,MAA5B,CARgB;AASvC;AACAkC,IAAAA,KAAK,EAAEe,YAAY,CAACf,KAAD,CAVoB;AAWvC;AACAC,IAAAA,OAAO,EAAEc,YAAY,CAACd,OAAD,CAZkB;AAavC;AACAC,IAAAA,IAAI,EAAEa,YAAY,CAACb,IAAD,CAdqB;AAevC;AACAC,IAAAA,OAAO,EAAEY,YAAY,CAACZ,OAAD,CAhBkB;AAiBvC;AACAlD,IAAAA,IAlBuC;AAmBvC;AACA;AACAoD,IAAAA,iBArBuC;AAsBvC;AACAE,IAAAA,eAvBuC;AAwBvC;AACAQ,IAAAA,YAzBuC;AA0BvC;AACA;AACA;AACAzB,IAAAA;AA7BuC,GAAD,EA8BrCiC,KAAK,CAACnB,IAAD,CA9BgC,CAAT,EA8BdE,KA9Bc,CAA/B;AA+BA,SAAOkB,aAAP;AACD","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@material-ui/utils\";\nimport { deepmerge } from '@material-ui/utils';\nimport common from '../colors/common';\nimport grey from '../colors/grey';\nimport indigo from '../colors/indigo';\nimport pink from '../colors/pink';\nimport red from '../colors/red';\nimport orange from '../colors/orange';\nimport blue from '../colors/blue';\nimport green from '../colors/green';\nimport { darken, getContrastRatio, lighten } from './colorManipulator';\nexport const light = {\n  // The colors used to style the text.\n  text: {\n    // The most important text.\n    primary: 'rgba(0, 0, 0, 0.87)',\n    // Secondary text.\n    secondary: 'rgba(0, 0, 0, 0.54)',\n    // Disabled text have even lower visual prominence.\n    disabled: 'rgba(0, 0, 0, 0.38)'\n  },\n  // The color used to divide different elements.\n  divider: 'rgba(0, 0, 0, 0.12)',\n  // The background colors used to style the surfaces.\n  // Consistency between these values is important.\n  background: {\n    paper: common.white,\n    default: grey[50]\n  },\n  // The colors used to style the action elements.\n  action: {\n    // The color of an active action like an icon button.\n    active: 'rgba(0, 0, 0, 0.54)',\n    // The color of an hovered action.\n    hover: 'rgba(0, 0, 0, 0.04)',\n    hoverOpacity: 0.04,\n    // The color of a selected action.\n    selected: 'rgba(0, 0, 0, 0.08)',\n    selectedOpacity: 0.08,\n    // The color of a disabled action.\n    disabled: 'rgba(0, 0, 0, 0.26)',\n    // The background color of a disabled action.\n    disabledBackground: 'rgba(0, 0, 0, 0.12)',\n    disabledOpacity: 0.38,\n    focus: 'rgba(0, 0, 0, 0.12)',\n    focusOpacity: 0.12,\n    activatedOpacity: 0.12\n  }\n};\nexport const dark = {\n  text: {\n    primary: common.white,\n    secondary: 'rgba(255, 255, 255, 0.7)',\n    disabled: 'rgba(255, 255, 255, 0.5)',\n    icon: 'rgba(255, 255, 255, 0.5)'\n  },\n  divider: 'rgba(255, 255, 255, 0.12)',\n  background: {\n    paper: grey[800],\n    default: '#303030'\n  },\n  action: {\n    active: common.white,\n    hover: 'rgba(255, 255, 255, 0.08)',\n    hoverOpacity: 0.08,\n    selected: 'rgba(255, 255, 255, 0.16)',\n    selectedOpacity: 0.16,\n    disabled: 'rgba(255, 255, 255, 0.3)',\n    disabledBackground: 'rgba(255, 255, 255, 0.12)',\n    disabledOpacity: 0.38,\n    focus: 'rgba(255, 255, 255, 0.12)',\n    focusOpacity: 0.12,\n    activatedOpacity: 0.24\n  }\n};\n\nfunction addLightOrDark(intent, direction, shade, tonalOffset) {\n  const tonalOffsetLight = tonalOffset.light || tonalOffset;\n  const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;\n\n  if (!intent[direction]) {\n    if (intent.hasOwnProperty(shade)) {\n      intent[direction] = intent[shade];\n    } else if (direction === 'light') {\n      intent.light = lighten(intent.main, tonalOffsetLight);\n    } else if (direction === 'dark') {\n      intent.dark = darken(intent.main, tonalOffsetDark);\n    }\n  }\n}\n\nexport default function createPalette(palette) {\n  const {\n    primary = {\n      light: indigo[300],\n      main: indigo[500],\n      dark: indigo[700]\n    },\n    secondary = {\n      light: pink.A200,\n      main: pink.A400,\n      dark: pink.A700\n    },\n    error = {\n      light: red[300],\n      main: red[500],\n      dark: red[700]\n    },\n    warning = {\n      light: orange[300],\n      main: orange[500],\n      dark: orange[700]\n    },\n    info = {\n      light: blue[300],\n      main: blue[500],\n      dark: blue[700]\n    },\n    success = {\n      light: green[300],\n      main: green[500],\n      dark: green[700]\n    },\n    mode = 'light',\n    contrastThreshold = 3,\n    tonalOffset = 0.2\n  } = palette,\n        other = _objectWithoutPropertiesLoose(palette, [\"primary\", \"secondary\", \"error\", \"warning\", \"info\", \"success\", \"mode\", \"contrastThreshold\", \"tonalOffset\"]); // Use the same logic as\n  // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59\n  // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54\n\n\n  function getContrastText(background) {\n    const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;\n\n    if (process.env.NODE_ENV !== 'production') {\n      const contrast = getContrastRatio(background, contrastText);\n\n      if (contrast < 3) {\n        console.error([`Material-UI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\\n'));\n      }\n    }\n\n    return contrastText;\n  }\n\n  const augmentColor = (color, mainShade = 500, lightShade = 300, darkShade = 700) => {\n    color = _extends({}, color);\n\n    if (!color.main && color[mainShade]) {\n      color.main = color[mainShade];\n    }\n\n    if (!color.main) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `Material-UI: The color provided to augmentColor(color) is invalid.\nThe color object needs to have a \\`main\\` property or a \\`${mainShade}\\` property.` : _formatMuiErrorMessage(4, mainShade));\n    }\n\n    if (typeof color.main !== 'string') {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `Material-UI: The color provided to augmentColor(color) is invalid.\n\\`color.main\\` should be a string, but \\`${JSON.stringify(color.main)}\\` was provided instead.\n\nDid you intend to use one of the following approaches?\n\nimport {Â green } from \"@material-ui/core/colors\";\n\nconst theme1 = createMuiTheme({ palette: {\n  primary: green,\n} });\n\nconst theme2 = createMuiTheme({ palette: {\n  primary: { main: green[500] },\n} });` : _formatMuiErrorMessage(5, JSON.stringify(color.main)));\n    }\n\n    addLightOrDark(color, 'light', lightShade, tonalOffset);\n    addLightOrDark(color, 'dark', darkShade, tonalOffset);\n\n    if (!color.contrastText) {\n      color.contrastText = getContrastText(color.main);\n    }\n\n    return color;\n  };\n\n  const modes = {\n    dark,\n    light\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!modes[mode]) {\n      console.error(`Material-UI: The palette mode \\`${mode}\\` is not supported.`);\n    }\n  }\n\n  const paletteOutput = deepmerge(_extends({\n    // A collection of common colors.\n    common,\n    // The palette mode, can be light or dark.\n    mode,\n    // The colors used to represent primary interface elements for a user.\n    primary: augmentColor(primary),\n    // The colors used to represent secondary interface elements for a user.\n    secondary: augmentColor(secondary, 'A400', 'A200', 'A700'),\n    // The colors used to represent interface elements that the user should be made aware of.\n    error: augmentColor(error),\n    // The colors used to represent potentially dangerous actions or important messages.\n    warning: augmentColor(warning),\n    // The colors used to present information to the user that is neutral and not necessarily important.\n    info: augmentColor(info),\n    // The colors used to indicate the successful completion of an action that user triggered.\n    success: augmentColor(success),\n    // The grey colors.\n    grey,\n    // Used by `getContrastText()` to maximize the contrast between\n    // the background and the text.\n    contrastThreshold,\n    // Takes a background color and returns the text color that maximizes the contrast.\n    getContrastText,\n    // Generate a rich color object.\n    augmentColor,\n    // Used by the functions below to shift a color's luminance by approximately\n    // two indexes within its tonal palette.\n    // E.g., shift from Red 500 to Red 300 or Red 700.\n    tonalOffset\n  }, modes[mode]), other);\n  return paletteOutput;\n}"]},"metadata":{},"sourceType":"module"}