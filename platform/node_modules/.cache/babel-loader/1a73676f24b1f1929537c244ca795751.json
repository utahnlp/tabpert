{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getDisplayName } from '@material-ui/utils';\nexport default function mergeClasses(options = {}) {\n  const {\n    baseClasses,\n    newClasses,\n    Component\n  } = options;\n\n  if (!newClasses) {\n    return baseClasses;\n  }\n\n  const nextClasses = _extends({}, baseClasses);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof newClasses === 'string') {\n      console.error([`Material-UI: The value \\`${newClasses}\\` ` + `provided to the classes prop of ${getDisplayName(Component)} is incorrect.`, 'You might want to use the className prop instead.'].join('\\n'));\n      return baseClasses;\n    }\n  }\n\n  Object.keys(newClasses).forEach(key => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!baseClasses[key] && newClasses[key]) {\n        console.error([`Material-UI: The key \\`${key}\\` ` + `provided to the classes prop is not implemented in ${getDisplayName(Component)}.`, `You can only override one of the following: ${Object.keys(baseClasses).join(',')}.`].join('\\n'));\n      }\n\n      if (newClasses[key] && typeof newClasses[key] !== 'string') {\n        console.error([`Material-UI: The key \\`${key}\\` ` + `provided to the classes prop is not valid for ${getDisplayName(Component)}.`, `You need to provide a non empty string instead of: ${newClasses[key]}.`].join('\\n'));\n      }\n    }\n\n    if (newClasses[key]) {\n      nextClasses[key] = `${baseClasses[key]} ${newClasses[key]}`;\n    }\n  });\n  return nextClasses;\n}","map":{"version":3,"sources":["/home/nupur/infotabs-extension/infotabs-code/interface/frontend/node_modules/@material-ui/styles/mergeClasses/mergeClasses.js"],"names":["_extends","getDisplayName","mergeClasses","options","baseClasses","newClasses","Component","nextClasses","process","env","NODE_ENV","console","error","join","Object","keys","forEach","key"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,eAAe,SAASC,YAAT,CAAsBC,OAAO,GAAG,EAAhC,EAAoC;AACjD,QAAM;AACJC,IAAAA,WADI;AAEJC,IAAAA,UAFI;AAGJC,IAAAA;AAHI,MAIFH,OAJJ;;AAMA,MAAI,CAACE,UAAL,EAAiB;AACf,WAAOD,WAAP;AACD;;AAED,QAAMG,WAAW,GAAGP,QAAQ,CAAC,EAAD,EAAKI,WAAL,CAA5B;;AAEA,MAAII,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,QAAI,OAAOL,UAAP,KAAsB,QAA1B,EAAoC;AAClCM,MAAAA,OAAO,CAACC,KAAR,CAAc,CAAE,4BAA2BP,UAAW,KAAvC,GAA+C,mCAAkCJ,cAAc,CAACK,SAAD,CAAY,gBAA5G,EAA6H,mDAA7H,EAAkLO,IAAlL,CAAuL,IAAvL,CAAd;AACA,aAAOT,WAAP;AACD;AACF;;AAEDU,EAAAA,MAAM,CAACC,IAAP,CAAYV,UAAZ,EAAwBW,OAAxB,CAAgCC,GAAG,IAAI;AACrC,QAAIT,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAI,CAACN,WAAW,CAACa,GAAD,CAAZ,IAAqBZ,UAAU,CAACY,GAAD,CAAnC,EAA0C;AACxCN,QAAAA,OAAO,CAACC,KAAR,CAAc,CAAE,0BAAyBK,GAAI,KAA9B,GAAsC,sDAAqDhB,cAAc,CAACK,SAAD,CAAY,GAAtH,EAA2H,+CAA8CQ,MAAM,CAACC,IAAP,CAAYX,WAAZ,EAAyBS,IAAzB,CAA8B,GAA9B,CAAmC,GAA5M,EAAgNA,IAAhN,CAAqN,IAArN,CAAd;AACD;;AAED,UAAIR,UAAU,CAACY,GAAD,CAAV,IAAmB,OAAOZ,UAAU,CAACY,GAAD,CAAjB,KAA2B,QAAlD,EAA4D;AAC1DN,QAAAA,OAAO,CAACC,KAAR,CAAc,CAAE,0BAAyBK,GAAI,KAA9B,GAAsC,iDAAgDhB,cAAc,CAACK,SAAD,CAAY,GAAjH,EAAsH,sDAAqDD,UAAU,CAACY,GAAD,CAAM,GAA3L,EAA+LJ,IAA/L,CAAoM,IAApM,CAAd;AACD;AACF;;AAED,QAAIR,UAAU,CAACY,GAAD,CAAd,EAAqB;AACnBV,MAAAA,WAAW,CAACU,GAAD,CAAX,GAAoB,GAAEb,WAAW,CAACa,GAAD,CAAM,IAAGZ,UAAU,CAACY,GAAD,CAAM,EAA1D;AACD;AACF,GAdD;AAeA,SAAOV,WAAP;AACD","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getDisplayName } from '@material-ui/utils';\nexport default function mergeClasses(options = {}) {\n  const {\n    baseClasses,\n    newClasses,\n    Component\n  } = options;\n\n  if (!newClasses) {\n    return baseClasses;\n  }\n\n  const nextClasses = _extends({}, baseClasses);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof newClasses === 'string') {\n      console.error([`Material-UI: The value \\`${newClasses}\\` ` + `provided to the classes prop of ${getDisplayName(Component)} is incorrect.`, 'You might want to use the className prop instead.'].join('\\n'));\n      return baseClasses;\n    }\n  }\n\n  Object.keys(newClasses).forEach(key => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!baseClasses[key] && newClasses[key]) {\n        console.error([`Material-UI: The key \\`${key}\\` ` + `provided to the classes prop is not implemented in ${getDisplayName(Component)}.`, `You can only override one of the following: ${Object.keys(baseClasses).join(',')}.`].join('\\n'));\n      }\n\n      if (newClasses[key] && typeof newClasses[key] !== 'string') {\n        console.error([`Material-UI: The key \\`${key}\\` ` + `provided to the classes prop is not valid for ${getDisplayName(Component)}.`, `You need to provide a non empty string instead of: ${newClasses[key]}.`].join('\\n'));\n      }\n    }\n\n    if (newClasses[key]) {\n      nextClasses[key] = `${baseClasses[key]} ${newClasses[key]}`;\n    }\n  });\n  return nextClasses;\n}"]},"metadata":{},"sourceType":"module"}