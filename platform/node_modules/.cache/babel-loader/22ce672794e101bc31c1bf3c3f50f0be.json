{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { HTMLElementType } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport Popover from '../Popover';\nimport MenuList from '../MenuList';\nimport setRef from '../utils/setRef';\nimport useTheme from '../styles/useTheme';\nconst RTL_ORIGIN = {\n  vertical: 'top',\n  horizontal: 'right'\n};\nconst LTR_ORIGIN = {\n  vertical: 'top',\n  horizontal: 'left'\n};\nexport const styles = {\n  /* Styles applied to the `Paper` component. */\n  paper: {\n    // specZ: The maximum height of a simple menu should be one or more rows less than the view\n    // height. This ensures a tapable area outside of the simple menu with which to dismiss\n    // the menu.\n    maxHeight: 'calc(100% - 96px)',\n    // Add iOS momentum scrolling.\n    WebkitOverflowScrolling: 'touch'\n  },\n\n  /* Styles applied to the `List` component via `MenuList`. */\n  list: {\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0\n  }\n};\nconst Menu = /*#__PURE__*/React.forwardRef(function Menu(props, ref) {\n  const {\n    autoFocus = true,\n    children,\n    classes,\n    disableAutoFocusItem = false,\n    MenuListProps = {},\n    onClose,\n    open,\n    PaperProps = {},\n    PopoverClasses,\n    transitionDuration = 'auto',\n    variant = 'selectedMenu',\n    TransitionProps: {\n      onEntering\n    } = {}\n  } = props,\n        TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, [\"onEntering\"]),\n        other = _objectWithoutPropertiesLoose(props, [\"autoFocus\", \"children\", \"classes\", \"disableAutoFocusItem\", \"MenuListProps\", \"onClose\", \"open\", \"PaperProps\", \"PopoverClasses\", \"transitionDuration\", \"variant\", \"TransitionProps\"]);\n\n  const theme = useTheme();\n  const autoFocusItem = autoFocus && !disableAutoFocusItem && open;\n  const menuListActionsRef = React.useRef(null);\n  const contentAnchorRef = React.useRef(null);\n\n  const getContentAnchorEl = () => contentAnchorRef.current;\n\n  const handleEntering = (element, isAppearing) => {\n    if (menuListActionsRef.current) {\n      menuListActionsRef.current.adjustStyleForScrollbar(element, theme);\n    }\n\n    if (onEntering) {\n      onEntering(element, isAppearing);\n    }\n  };\n\n  const handleListKeyDown = event => {\n    if (event.key === 'Tab') {\n      event.preventDefault();\n\n      if (onClose) {\n        onClose(event, 'tabKeyDown');\n      }\n    }\n  };\n  /**\n   * the index of the item should receive focus\n   * in a `variant=\"selectedMenu\"` it's the first `selected` item\n   * otherwise it's the very first item.\n   */\n\n\n  let activeItemIndex = -1; // since we inject focus related props into children we have to do a lookahead\n  // to check if there is a `selected` item. We're looking for the last `selected`\n  // item and use the first valid item as a fallback\n\n  React.Children.map(children, (child, index) => {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: The Menu component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    if (!child.props.disabled) {\n      if (variant !== \"menu\" && child.props.selected) {\n        activeItemIndex = index;\n      } else if (activeItemIndex === -1) {\n        activeItemIndex = index;\n      }\n    }\n  });\n  const items = React.Children.map(children, (child, index) => {\n    if (index === activeItemIndex) {\n      return /*#__PURE__*/React.cloneElement(child, {\n        ref: instance => {\n          contentAnchorRef.current = instance;\n          setRef(child.ref, instance);\n        }\n      });\n    }\n\n    return child;\n  });\n  return /*#__PURE__*/React.createElement(Popover, _extends({\n    getContentAnchorEl: getContentAnchorEl,\n    classes: PopoverClasses,\n    onClose: onClose,\n    anchorOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,\n    transformOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,\n    PaperProps: _extends({}, PaperProps, {\n      classes: _extends({}, PaperProps.classes, {\n        root: classes.paper\n      })\n    }),\n    open: open,\n    ref: ref,\n    transitionDuration: transitionDuration,\n    TransitionProps: _extends({\n      onEntering: handleEntering\n    }, TransitionProps)\n  }, other), /*#__PURE__*/React.createElement(MenuList, _extends({\n    onKeyDown: handleListKeyDown,\n    actions: menuListActionsRef,\n    autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),\n    autoFocusItem: autoFocusItem,\n    variant: variant\n  }, MenuListProps, {\n    className: clsx(classes.list, MenuListProps.className)\n  }), items));\n});\nprocess.env.NODE_ENV !== \"production\" ? Menu.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * A HTML element, or a function that returns it.\n   * It's used to set the position of the menu.\n   */\n  anchorEl: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([HTMLElementType, PropTypes.func]),\n\n  /**\n   * If `true` (Default) will focus the `[role=\"menu\"]` if no focusable child is found. Disabled\n   * children are not focusable. If you set this prop to `false` focus will be placed\n   * on the parent modal container. This has severe accessibility implications\n   * and should only be considered if you manage focus otherwise.\n   * @default true\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Menu contents, normally `MenuItem`s.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * When opening the menu will not focus the active item but the `[role=\"menu\"]`\n   * unless `autoFocus` is also set to `false`. Not using the default means not\n   * following WAI-ARIA authoring practices. Please be considerate about possible\n   * accessibility implications.\n   * @default false\n   */\n  disableAutoFocusItem: PropTypes.bool,\n\n  /**\n   * Props applied to the [`MenuList`](/api/menu-list/) element.\n   * @default {}\n   */\n  MenuListProps: PropTypes.object,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`, `\"tabKeyDown\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * If `true`, the menu is visible.\n   */\n  open: PropTypes.bool.isRequired,\n\n  /**\n   * @ignore\n   */\n  PaperProps: PropTypes.object,\n\n  /**\n   * `classes` prop applied to the [`Popover`](/api/popover/) element.\n   */\n  PopoverClasses: PropTypes.object,\n\n  /**\n   * The length of the transition in `ms`, or 'auto'\n   * @default 'auto'\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })]),\n\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition) component.\n   * @default {}\n   */\n  TransitionProps: PropTypes.object,\n\n  /**\n   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus\n   * and the vertical alignment relative to the anchor element.\n   * @default 'selectedMenu'\n   */\n  variant: PropTypes.oneOf(['menu', 'selectedMenu'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiMenu'\n})(Menu);","map":{"version":3,"sources":["/home/nupur/infotabs-extension/infotabs-code/interface/frontend/node_modules/@material-ui/core/Menu/Menu.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","isFragment","PropTypes","clsx","HTMLElementType","withStyles","Popover","MenuList","setRef","useTheme","RTL_ORIGIN","vertical","horizontal","LTR_ORIGIN","styles","paper","maxHeight","WebkitOverflowScrolling","list","outline","Menu","forwardRef","props","ref","autoFocus","children","classes","disableAutoFocusItem","MenuListProps","onClose","open","PaperProps","PopoverClasses","transitionDuration","variant","TransitionProps","onEntering","other","theme","autoFocusItem","menuListActionsRef","useRef","contentAnchorRef","getContentAnchorEl","current","handleEntering","element","isAppearing","adjustStyleForScrollbar","handleListKeyDown","event","key","preventDefault","activeItemIndex","Children","map","child","index","isValidElement","process","env","NODE_ENV","console","error","join","disabled","selected","items","cloneElement","instance","createElement","anchorOrigin","direction","transformOrigin","root","onKeyDown","actions","className","propTypes","anchorEl","oneOfType","func","bool","node","object","isRequired","oneOf","number","shape","appear","enter","exit","name"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { HTMLElementType } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport Popover from '../Popover';\nimport MenuList from '../MenuList';\nimport setRef from '../utils/setRef';\nimport useTheme from '../styles/useTheme';\nconst RTL_ORIGIN = {\n  vertical: 'top',\n  horizontal: 'right'\n};\nconst LTR_ORIGIN = {\n  vertical: 'top',\n  horizontal: 'left'\n};\nexport const styles = {\n  /* Styles applied to the `Paper` component. */\n  paper: {\n    // specZ: The maximum height of a simple menu should be one or more rows less than the view\n    // height. This ensures a tapable area outside of the simple menu with which to dismiss\n    // the menu.\n    maxHeight: 'calc(100% - 96px)',\n    // Add iOS momentum scrolling.\n    WebkitOverflowScrolling: 'touch'\n  },\n\n  /* Styles applied to the `List` component via `MenuList`. */\n  list: {\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0\n  }\n};\nconst Menu = /*#__PURE__*/React.forwardRef(function Menu(props, ref) {\n  const {\n    autoFocus = true,\n    children,\n    classes,\n    disableAutoFocusItem = false,\n    MenuListProps = {},\n    onClose,\n    open,\n    PaperProps = {},\n    PopoverClasses,\n    transitionDuration = 'auto',\n    variant = 'selectedMenu',\n    TransitionProps: {\n      onEntering\n    } = {}\n  } = props,\n        TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, [\"onEntering\"]),\n        other = _objectWithoutPropertiesLoose(props, [\"autoFocus\", \"children\", \"classes\", \"disableAutoFocusItem\", \"MenuListProps\", \"onClose\", \"open\", \"PaperProps\", \"PopoverClasses\", \"transitionDuration\", \"variant\", \"TransitionProps\"]);\n\n  const theme = useTheme();\n  const autoFocusItem = autoFocus && !disableAutoFocusItem && open;\n  const menuListActionsRef = React.useRef(null);\n  const contentAnchorRef = React.useRef(null);\n\n  const getContentAnchorEl = () => contentAnchorRef.current;\n\n  const handleEntering = (element, isAppearing) => {\n    if (menuListActionsRef.current) {\n      menuListActionsRef.current.adjustStyleForScrollbar(element, theme);\n    }\n\n    if (onEntering) {\n      onEntering(element, isAppearing);\n    }\n  };\n\n  const handleListKeyDown = event => {\n    if (event.key === 'Tab') {\n      event.preventDefault();\n\n      if (onClose) {\n        onClose(event, 'tabKeyDown');\n      }\n    }\n  };\n  /**\n   * the index of the item should receive focus\n   * in a `variant=\"selectedMenu\"` it's the first `selected` item\n   * otherwise it's the very first item.\n   */\n\n\n  let activeItemIndex = -1; // since we inject focus related props into children we have to do a lookahead\n  // to check if there is a `selected` item. We're looking for the last `selected`\n  // item and use the first valid item as a fallback\n\n  React.Children.map(children, (child, index) => {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: The Menu component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    if (!child.props.disabled) {\n      if (variant !== \"menu\" && child.props.selected) {\n        activeItemIndex = index;\n      } else if (activeItemIndex === -1) {\n        activeItemIndex = index;\n      }\n    }\n  });\n  const items = React.Children.map(children, (child, index) => {\n    if (index === activeItemIndex) {\n      return /*#__PURE__*/React.cloneElement(child, {\n        ref: instance => {\n          contentAnchorRef.current = instance;\n          setRef(child.ref, instance);\n        }\n      });\n    }\n\n    return child;\n  });\n  return /*#__PURE__*/React.createElement(Popover, _extends({\n    getContentAnchorEl: getContentAnchorEl,\n    classes: PopoverClasses,\n    onClose: onClose,\n    anchorOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,\n    transformOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,\n    PaperProps: _extends({}, PaperProps, {\n      classes: _extends({}, PaperProps.classes, {\n        root: classes.paper\n      })\n    }),\n    open: open,\n    ref: ref,\n    transitionDuration: transitionDuration,\n    TransitionProps: _extends({\n      onEntering: handleEntering\n    }, TransitionProps)\n  }, other), /*#__PURE__*/React.createElement(MenuList, _extends({\n    onKeyDown: handleListKeyDown,\n    actions: menuListActionsRef,\n    autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),\n    autoFocusItem: autoFocusItem,\n    variant: variant\n  }, MenuListProps, {\n    className: clsx(classes.list, MenuListProps.className)\n  }), items));\n});\nprocess.env.NODE_ENV !== \"production\" ? Menu.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * A HTML element, or a function that returns it.\n   * It's used to set the position of the menu.\n   */\n  anchorEl: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([HTMLElementType, PropTypes.func]),\n\n  /**\n   * If `true` (Default) will focus the `[role=\"menu\"]` if no focusable child is found. Disabled\n   * children are not focusable. If you set this prop to `false` focus will be placed\n   * on the parent modal container. This has severe accessibility implications\n   * and should only be considered if you manage focus otherwise.\n   * @default true\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Menu contents, normally `MenuItem`s.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * When opening the menu will not focus the active item but the `[role=\"menu\"]`\n   * unless `autoFocus` is also set to `false`. Not using the default means not\n   * following WAI-ARIA authoring practices. Please be considerate about possible\n   * accessibility implications.\n   * @default false\n   */\n  disableAutoFocusItem: PropTypes.bool,\n\n  /**\n   * Props applied to the [`MenuList`](/api/menu-list/) element.\n   * @default {}\n   */\n  MenuListProps: PropTypes.object,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`, `\"tabKeyDown\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * If `true`, the menu is visible.\n   */\n  open: PropTypes.bool.isRequired,\n\n  /**\n   * @ignore\n   */\n  PaperProps: PropTypes.object,\n\n  /**\n   * `classes` prop applied to the [`Popover`](/api/popover/) element.\n   */\n  PopoverClasses: PropTypes.object,\n\n  /**\n   * The length of the transition in `ms`, or 'auto'\n   * @default 'auto'\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })]),\n\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition) component.\n   * @default {}\n   */\n  TransitionProps: PropTypes.object,\n\n  /**\n   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus\n   * and the vertical alignment relative to the anchor element.\n   * @default 'selectedMenu'\n   */\n  variant: PropTypes.oneOf(['menu', 'selectedMenu'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiMenu'\n})(Menu);"]},"metadata":{},"sourceType":"module"}