{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport isMuiElement from '../utils/isMuiElement';\nimport ImageListContext from '../ImageList/ImageListContext';\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-block',\n    position: 'relative',\n    lineHeight: 0 // ü§∑üèª‚Äç‚ôÇÔ∏èFixes masonry item gap\n\n  },\n\n  /* Styles applied to an `img` element to ensure it covers the item. */\n  img: {\n    objectFit: 'cover',\n    width: '100%',\n    height: '100%'\n  },\n\n  /* Styles applied to the root element if `variant=\"standard\"`. */\n  standard: {\n    // For titlebar under list item\n    display: 'flex',\n    flexDirection: 'column',\n    '& $img': {\n      height: 'auto',\n      flexGrow: 1\n    }\n  },\n\n  /* Styles applied to the root element if `variant=\"woven\"`. */\n  woven: {\n    height: '100%',\n    alignSelf: 'center',\n    '&:nth-child(even)': {\n      height: '70%'\n    }\n  }\n};\nconst ImageListItem = /*#__PURE__*/React.forwardRef(function ImageListItem(props, ref) {\n  // TODO: - Use jsdoc @default?: \"cols rows default values are for docs only\"\n  const {\n    children,\n    classes,\n    className,\n    cols = 1,\n    component: Component = 'li',\n    rows = 1,\n    style\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"classes\", \"className\", \"cols\", \"component\", \"rows\", \"style\"]);\n\n  const {\n    rowHeight = 'auto',\n    gap,\n    variant\n  } = React.useContext(ImageListContext);\n  let height = 'auto';\n\n  if (variant === 'woven') {\n    height = undefined;\n  } else if (rowHeight !== 'auto') {\n    height = rowHeight * rows + gap * (rows - 1);\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, classes[variant], className),\n    ref: ref,\n    style: _extends({\n      height,\n      gridColumnEnd: variant !== 'masonry' ? `span ${cols}` : undefined,\n      gridRowEnd: variant !== 'masonry' ? `span ${rows}` : undefined,\n      marginBottom: variant === 'masonry' ? gap : undefined\n    }, style)\n  }, other), React.Children.map(children, child => {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return null;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: The ImageListItem component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    if (child.type === 'img' || isMuiElement(child, ['Image'])) {\n      return /*#__PURE__*/React.cloneElement(child, {\n        className: clsx(classes.img, child.props.className)\n      });\n    }\n\n    return child;\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? ImageListItem.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * While you can pass any node as children, the main use case is for an img.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Width of the item in number of grid columns.\n   * @default 1\n   */\n  cols: PropTypes.number,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Height of the item in number of grid rows.\n   * @default 1\n   */\n  rows: PropTypes.number,\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiImageListItem'\n})(ImageListItem);","map":{"version":3,"sources":["/home/nupur/infotabs-extension/infotabs-code/interface/frontend/node_modules/@material-ui/core/ImageListItem/ImageListItem.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","isFragment","PropTypes","clsx","withStyles","isMuiElement","ImageListContext","styles","root","display","position","lineHeight","img","objectFit","width","height","standard","flexDirection","flexGrow","woven","alignSelf","ImageListItem","forwardRef","props","ref","children","classes","className","cols","component","Component","rows","style","other","rowHeight","gap","variant","useContext","undefined","createElement","gridColumnEnd","gridRowEnd","marginBottom","Children","map","child","isValidElement","process","env","NODE_ENV","console","error","join","type","cloneElement","propTypes","node","object","string","number","elementType","name"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport isMuiElement from '../utils/isMuiElement';\nimport ImageListContext from '../ImageList/ImageListContext';\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-block',\n    position: 'relative',\n    lineHeight: 0 // ü§∑üèª‚Äç‚ôÇÔ∏èFixes masonry item gap\n\n  },\n\n  /* Styles applied to an `img` element to ensure it covers the item. */\n  img: {\n    objectFit: 'cover',\n    width: '100%',\n    height: '100%'\n  },\n\n  /* Styles applied to the root element if `variant=\"standard\"`. */\n  standard: {\n    // For titlebar under list item\n    display: 'flex',\n    flexDirection: 'column',\n    '& $img': {\n      height: 'auto',\n      flexGrow: 1\n    }\n  },\n\n  /* Styles applied to the root element if `variant=\"woven\"`. */\n  woven: {\n    height: '100%',\n    alignSelf: 'center',\n    '&:nth-child(even)': {\n      height: '70%'\n    }\n  }\n};\nconst ImageListItem = /*#__PURE__*/React.forwardRef(function ImageListItem(props, ref) {\n  // TODO: - Use jsdoc @default?: \"cols rows default values are for docs only\"\n  const {\n    children,\n    classes,\n    className,\n    cols = 1,\n    component: Component = 'li',\n    rows = 1,\n    style\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"classes\", \"className\", \"cols\", \"component\", \"rows\", \"style\"]);\n\n  const {\n    rowHeight = 'auto',\n    gap,\n    variant\n  } = React.useContext(ImageListContext);\n  let height = 'auto';\n\n  if (variant === 'woven') {\n    height = undefined;\n  } else if (rowHeight !== 'auto') {\n    height = rowHeight * rows + gap * (rows - 1);\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, classes[variant], className),\n    ref: ref,\n    style: _extends({\n      height,\n      gridColumnEnd: variant !== 'masonry' ? `span ${cols}` : undefined,\n      gridRowEnd: variant !== 'masonry' ? `span ${rows}` : undefined,\n      marginBottom: variant === 'masonry' ? gap : undefined\n    }, style)\n  }, other), React.Children.map(children, child => {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return null;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: The ImageListItem component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    if (child.type === 'img' || isMuiElement(child, ['Image'])) {\n      return /*#__PURE__*/React.cloneElement(child, {\n        className: clsx(classes.img, child.props.className)\n      });\n    }\n\n    return child;\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? ImageListItem.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * While you can pass any node as children, the main use case is for an img.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Width of the item in number of grid columns.\n   * @default 1\n   */\n  cols: PropTypes.number,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Height of the item in number of grid rows.\n   * @default 1\n   */\n  rows: PropTypes.number,\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiImageListItem'\n})(ImageListItem);"]},"metadata":{},"sourceType":"module"}