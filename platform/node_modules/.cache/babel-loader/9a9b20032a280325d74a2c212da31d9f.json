{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\nimport FormLabel from '../FormLabel';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'block',\n    transformOrigin: 'top left'\n  },\n\n  /* Pseudo-class applied to the root element if `focused={true}`. */\n  focused: {},\n\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n\n  /* Pseudo-class applied to the root element if `error={true}`. */\n  error: {},\n\n  /* Pseudo-class applied to the root element if `required={true}`. */\n  required: {},\n\n  /* Pseudo-class applied to the asterisk element. */\n  asterisk: {},\n\n  /* Styles applied to the root element if the component is a descendant of `FormControl`. */\n  formControl: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    // slight alteration to spec spacing to match visual spec result\n    transform: 'translate(0, 24px) scale(1)'\n  },\n\n  /* Styles applied to the root element if `margin=\"dense\"`. */\n  marginDense: {\n    // Compensation for the `Input.inputDense` style.\n    transform: 'translate(0, 21px) scale(1)'\n  },\n\n  /* Styles applied to the `input` element if `shrink={true}`. */\n  shrink: {\n    transform: 'translate(0, 1.5px) scale(0.75)',\n    transformOrigin: 'top left'\n  },\n\n  /* Styles applied to the `input` element unless `disableAnimation={true}`. */\n  animated: {\n    transition: theme.transitions.create(['color', 'transform'], {\n      duration: theme.transitions.duration.shorter,\n      easing: theme.transitions.easing.easeOut\n    })\n  },\n\n  /* Styles applied to the root element if `variant=\"filled\"`. */\n  filled: {\n    // Chrome's autofill feature gives the input field a yellow background.\n    // Since the input field is behind the label in the HTML tree,\n    // the input field is drawn last and hides the label with an opaque background color.\n    // zIndex: 1 will raise the label above opaque background-colors of input.\n    zIndex: 1,\n    pointerEvents: 'none',\n    transform: 'translate(12px, 20px) scale(1)',\n    '&$marginDense': {\n      transform: 'translate(12px, 17px) scale(1)'\n    },\n    '&$shrink': {\n      transform: 'translate(12px, 10px) scale(0.75)',\n      '&$marginDense': {\n        transform: 'translate(12px, 7px) scale(0.75)'\n      }\n    }\n  },\n\n  /* Styles applied to the root element if `variant=\"outlined\"`. */\n  outlined: {\n    // see comment above on filled.zIndex\n    zIndex: 1,\n    pointerEvents: 'none',\n    transform: 'translate(14px, 20px) scale(1)',\n    '&$marginDense': {\n      transform: 'translate(14px, 12px) scale(1)'\n    },\n    '&$shrink': {\n      transform: 'translate(14px, -6px) scale(0.75)'\n    }\n  }\n});\nconst InputLabel = /*#__PURE__*/React.forwardRef(function InputLabel(props, ref) {\n  const {\n    classes,\n    className,\n    disableAnimation = false,\n    shrink: shrinkProp\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"classes\", \"className\", \"disableAnimation\", \"margin\", \"shrink\", \"variant\"]);\n\n  const muiFormControl = useFormControl();\n  let shrink = shrinkProp;\n\n  if (typeof shrink === 'undefined' && muiFormControl) {\n    shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;\n  }\n\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['margin', 'variant']\n  });\n  return /*#__PURE__*/React.createElement(FormLabel, _extends({\n    \"data-shrink\": shrink,\n    className: clsx(classes.root, className, muiFormControl && classes.formControl, !disableAnimation && classes.animated, shrink && classes.shrink, fcs.margin === 'dense' && classes.marginDense, {\n      'filled': classes.filled,\n      'outlined': classes.outlined\n    }[fcs.variant]),\n    classes: {\n      focused: classes.focused,\n      disabled: classes.disabled,\n      error: classes.error,\n      required: classes.required,\n      asterisk: classes.asterisk\n    },\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? InputLabel.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The contents of the `InputLabel`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * If `true`, the transition animation is disabled.\n   * @default false\n   */\n  disableAnimation: PropTypes.bool,\n\n  /**\n   * If `true`, apply disabled class.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label will be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the input of this label is focused.\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense']),\n\n  /**\n   * if `true`, the label will indicate that the input is required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * If `true`, the label is shrunk.\n   */\n  shrink: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiInputLabel'\n})(InputLabel);","map":{"version":3,"sources":["/home/nupur/infotabs-extension/infotabs-code/interface/frontend/node_modules/@material-ui/core/InputLabel/InputLabel.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","clsx","formControlState","useFormControl","withStyles","FormLabel","styles","theme","root","display","transformOrigin","focused","disabled","error","required","asterisk","formControl","position","left","top","transform","marginDense","shrink","animated","transition","transitions","create","duration","shorter","easing","easeOut","filled","zIndex","pointerEvents","outlined","InputLabel","forwardRef","props","ref","classes","className","disableAnimation","shrinkProp","other","muiFormControl","adornedStart","fcs","states","createElement","margin","variant","process","env","NODE_ENV","propTypes","children","node","object","string","color","oneOf","bool","name"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAO,MAAMC,MAAM,GAAGC,KAAK,KAAK;AAC9B;AACAC,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE,OADL;AAEJC,IAAAA,eAAe,EAAE;AAFb,GAFwB;;AAO9B;AACAC,EAAAA,OAAO,EAAE,EARqB;;AAU9B;AACAC,EAAAA,QAAQ,EAAE,EAXoB;;AAa9B;AACAC,EAAAA,KAAK,EAAE,EAduB;;AAgB9B;AACAC,EAAAA,QAAQ,EAAE,EAjBoB;;AAmB9B;AACAC,EAAAA,QAAQ,EAAE,EApBoB;;AAsB9B;AACAC,EAAAA,WAAW,EAAE;AACXC,IAAAA,QAAQ,EAAE,UADC;AAEXC,IAAAA,IAAI,EAAE,CAFK;AAGXC,IAAAA,GAAG,EAAE,CAHM;AAIX;AACAC,IAAAA,SAAS,EAAE;AALA,GAvBiB;;AA+B9B;AACAC,EAAAA,WAAW,EAAE;AACX;AACAD,IAAAA,SAAS,EAAE;AAFA,GAhCiB;;AAqC9B;AACAE,EAAAA,MAAM,EAAE;AACNF,IAAAA,SAAS,EAAE,iCADL;AAENV,IAAAA,eAAe,EAAE;AAFX,GAtCsB;;AA2C9B;AACAa,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAEjB,KAAK,CAACkB,WAAN,CAAkBC,MAAlB,CAAyB,CAAC,OAAD,EAAU,WAAV,CAAzB,EAAiD;AAC3DC,MAAAA,QAAQ,EAAEpB,KAAK,CAACkB,WAAN,CAAkBE,QAAlB,CAA2BC,OADsB;AAE3DC,MAAAA,MAAM,EAAEtB,KAAK,CAACkB,WAAN,CAAkBI,MAAlB,CAAyBC;AAF0B,KAAjD;AADJ,GA5CoB;;AAmD9B;AACAC,EAAAA,MAAM,EAAE;AACN;AACA;AACA;AACA;AACAC,IAAAA,MAAM,EAAE,CALF;AAMNC,IAAAA,aAAa,EAAE,MANT;AAONb,IAAAA,SAAS,EAAE,gCAPL;AAQN,qBAAiB;AACfA,MAAAA,SAAS,EAAE;AADI,KARX;AAWN,gBAAY;AACVA,MAAAA,SAAS,EAAE,mCADD;AAEV,uBAAiB;AACfA,QAAAA,SAAS,EAAE;AADI;AAFP;AAXN,GApDsB;;AAuE9B;AACAc,EAAAA,QAAQ,EAAE;AACR;AACAF,IAAAA,MAAM,EAAE,CAFA;AAGRC,IAAAA,aAAa,EAAE,MAHP;AAIRb,IAAAA,SAAS,EAAE,gCAJH;AAKR,qBAAiB;AACfA,MAAAA,SAAS,EAAE;AADI,KALT;AAQR,gBAAY;AACVA,MAAAA,SAAS,EAAE;AADD;AARJ;AAxEoB,CAAL,CAApB;AAqFP,MAAMe,UAAU,GAAG,aAAapC,KAAK,CAACqC,UAAN,CAAiB,SAASD,UAAT,CAAoBE,KAApB,EAA2BC,GAA3B,EAAgC;AAC/E,QAAM;AACJC,IAAAA,OADI;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,gBAAgB,GAAG,KAHf;AAIJnB,IAAAA,MAAM,EAAEoB;AAJJ,MAKFL,KALJ;AAAA,QAMMM,KAAK,GAAG7C,6BAA6B,CAACuC,KAAD,EAAQ,CAAC,SAAD,EAAY,WAAZ,EAAyB,kBAAzB,EAA6C,QAA7C,EAAuD,QAAvD,EAAiE,SAAjE,CAAR,CAN3C;;AAQA,QAAMO,cAAc,GAAGzC,cAAc,EAArC;AACA,MAAImB,MAAM,GAAGoB,UAAb;;AAEA,MAAI,OAAOpB,MAAP,KAAkB,WAAlB,IAAiCsB,cAArC,EAAqD;AACnDtB,IAAAA,MAAM,GAAGsB,cAAc,CAACb,MAAf,IAAyBa,cAAc,CAACjC,OAAxC,IAAmDiC,cAAc,CAACC,YAA3E;AACD;;AAED,QAAMC,GAAG,GAAG5C,gBAAgB,CAAC;AAC3BmC,IAAAA,KAD2B;AAE3BO,IAAAA,cAF2B;AAG3BG,IAAAA,MAAM,EAAE,CAAC,QAAD,EAAW,SAAX;AAHmB,GAAD,CAA5B;AAKA,SAAO,aAAahD,KAAK,CAACiD,aAAN,CAAoB3C,SAApB,EAA+BR,QAAQ,CAAC;AAC1D,mBAAeyB,MAD2C;AAE1DkB,IAAAA,SAAS,EAAEvC,IAAI,CAACsC,OAAO,CAAC/B,IAAT,EAAegC,SAAf,EAA0BI,cAAc,IAAIL,OAAO,CAACvB,WAApD,EAAiE,CAACyB,gBAAD,IAAqBF,OAAO,CAAChB,QAA9F,EAAwGD,MAAM,IAAIiB,OAAO,CAACjB,MAA1H,EAAkIwB,GAAG,CAACG,MAAJ,KAAe,OAAf,IAA0BV,OAAO,CAAClB,WAApK,EAAiL;AAC9L,gBAAUkB,OAAO,CAACR,MAD4K;AAE9L,kBAAYQ,OAAO,CAACL;AAF0K,MAG9LY,GAAG,CAACI,OAH0L,CAAjL,CAF2C;AAM1DX,IAAAA,OAAO,EAAE;AACP5B,MAAAA,OAAO,EAAE4B,OAAO,CAAC5B,OADV;AAEPC,MAAAA,QAAQ,EAAE2B,OAAO,CAAC3B,QAFX;AAGPC,MAAAA,KAAK,EAAE0B,OAAO,CAAC1B,KAHR;AAIPC,MAAAA,QAAQ,EAAEyB,OAAO,CAACzB,QAJX;AAKPC,MAAAA,QAAQ,EAAEwB,OAAO,CAACxB;AALX,KANiD;AAa1DuB,IAAAA,GAAG,EAAEA;AAbqD,GAAD,EAcxDK,KAdwD,CAAvC,CAApB;AAeD,CApC+B,CAAhC;AAqCAQ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwClB,UAAU,CAACmB,SAAX,GAAuB;AAC7D;AACA;AACA;AACA;;AAEA;;;AAGAC,EAAAA,QAAQ,EAAEvD,SAAS,CAACwD,IATyC;;AAW7D;;;AAGAjB,EAAAA,OAAO,EAAEvC,SAAS,CAACyD,MAd0C;;AAgB7D;;;AAGAjB,EAAAA,SAAS,EAAExC,SAAS,CAAC0D,MAnBwC;;AAqB7D;;;AAGAC,EAAAA,KAAK,EAAE3D,SAAS,CAAC4D,KAAV,CAAgB,CAAC,SAAD,EAAY,WAAZ,CAAhB,CAxBsD;;AA0B7D;;;;AAIAnB,EAAAA,gBAAgB,EAAEzC,SAAS,CAAC6D,IA9BiC;;AAgC7D;;;AAGAjD,EAAAA,QAAQ,EAAEZ,SAAS,CAAC6D,IAnCyC;;AAqC7D;;;AAGAhD,EAAAA,KAAK,EAAEb,SAAS,CAAC6D,IAxC4C;;AA0C7D;;;AAGAlD,EAAAA,OAAO,EAAEX,SAAS,CAAC6D,IA7C0C;;AA+C7D;;;;AAIAZ,EAAAA,MAAM,EAAEjD,SAAS,CAAC4D,KAAV,CAAgB,CAAC,OAAD,CAAhB,CAnDqD;;AAqD7D;;;AAGA9C,EAAAA,QAAQ,EAAEd,SAAS,CAAC6D,IAxDyC;;AA0D7D;;;AAGAvC,EAAAA,MAAM,EAAEtB,SAAS,CAAC6D,IA7D2C;;AA+D7D;;;AAGAX,EAAAA,OAAO,EAAElD,SAAS,CAAC4D,KAAV,CAAgB,CAAC,QAAD,EAAW,UAAX,EAAuB,UAAvB,CAAhB;AAlEoD,CAA/D,GAmEI,KAAK,CAnET;AAoEA,eAAexD,UAAU,CAACE,MAAD,EAAS;AAChCwD,EAAAA,IAAI,EAAE;AAD0B,CAAT,CAAV,CAEZ3B,UAFY,CAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\nimport FormLabel from '../FormLabel';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'block',\n    transformOrigin: 'top left'\n  },\n\n  /* Pseudo-class applied to the root element if `focused={true}`. */\n  focused: {},\n\n  /* Pseudo-class applied to the root element if `disabled={true}`. */\n  disabled: {},\n\n  /* Pseudo-class applied to the root element if `error={true}`. */\n  error: {},\n\n  /* Pseudo-class applied to the root element if `required={true}`. */\n  required: {},\n\n  /* Pseudo-class applied to the asterisk element. */\n  asterisk: {},\n\n  /* Styles applied to the root element if the component is a descendant of `FormControl`. */\n  formControl: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    // slight alteration to spec spacing to match visual spec result\n    transform: 'translate(0, 24px) scale(1)'\n  },\n\n  /* Styles applied to the root element if `margin=\"dense\"`. */\n  marginDense: {\n    // Compensation for the `Input.inputDense` style.\n    transform: 'translate(0, 21px) scale(1)'\n  },\n\n  /* Styles applied to the `input` element if `shrink={true}`. */\n  shrink: {\n    transform: 'translate(0, 1.5px) scale(0.75)',\n    transformOrigin: 'top left'\n  },\n\n  /* Styles applied to the `input` element unless `disableAnimation={true}`. */\n  animated: {\n    transition: theme.transitions.create(['color', 'transform'], {\n      duration: theme.transitions.duration.shorter,\n      easing: theme.transitions.easing.easeOut\n    })\n  },\n\n  /* Styles applied to the root element if `variant=\"filled\"`. */\n  filled: {\n    // Chrome's autofill feature gives the input field a yellow background.\n    // Since the input field is behind the label in the HTML tree,\n    // the input field is drawn last and hides the label with an opaque background color.\n    // zIndex: 1 will raise the label above opaque background-colors of input.\n    zIndex: 1,\n    pointerEvents: 'none',\n    transform: 'translate(12px, 20px) scale(1)',\n    '&$marginDense': {\n      transform: 'translate(12px, 17px) scale(1)'\n    },\n    '&$shrink': {\n      transform: 'translate(12px, 10px) scale(0.75)',\n      '&$marginDense': {\n        transform: 'translate(12px, 7px) scale(0.75)'\n      }\n    }\n  },\n\n  /* Styles applied to the root element if `variant=\"outlined\"`. */\n  outlined: {\n    // see comment above on filled.zIndex\n    zIndex: 1,\n    pointerEvents: 'none',\n    transform: 'translate(14px, 20px) scale(1)',\n    '&$marginDense': {\n      transform: 'translate(14px, 12px) scale(1)'\n    },\n    '&$shrink': {\n      transform: 'translate(14px, -6px) scale(0.75)'\n    }\n  }\n});\nconst InputLabel = /*#__PURE__*/React.forwardRef(function InputLabel(props, ref) {\n  const {\n    classes,\n    className,\n    disableAnimation = false,\n    shrink: shrinkProp\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"classes\", \"className\", \"disableAnimation\", \"margin\", \"shrink\", \"variant\"]);\n\n  const muiFormControl = useFormControl();\n  let shrink = shrinkProp;\n\n  if (typeof shrink === 'undefined' && muiFormControl) {\n    shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;\n  }\n\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['margin', 'variant']\n  });\n  return /*#__PURE__*/React.createElement(FormLabel, _extends({\n    \"data-shrink\": shrink,\n    className: clsx(classes.root, className, muiFormControl && classes.formControl, !disableAnimation && classes.animated, shrink && classes.shrink, fcs.margin === 'dense' && classes.marginDense, {\n      'filled': classes.filled,\n      'outlined': classes.outlined\n    }[fcs.variant]),\n    classes: {\n      focused: classes.focused,\n      disabled: classes.disabled,\n      error: classes.error,\n      required: classes.required,\n      asterisk: classes.asterisk\n    },\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? InputLabel.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The contents of the `InputLabel`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * If `true`, the transition animation is disabled.\n   * @default false\n   */\n  disableAnimation: PropTypes.bool,\n\n  /**\n   * If `true`, apply disabled class.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label will be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the input of this label is focused.\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense']),\n\n  /**\n   * if `true`, the label will indicate that the input is required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * If `true`, the label is shrunk.\n   */\n  shrink: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiInputLabel'\n})(InputLabel);"]},"metadata":{},"sourceType":"module"}