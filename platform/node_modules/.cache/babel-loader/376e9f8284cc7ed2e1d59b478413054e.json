{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { useThemeVariants } from '@material-ui/styles';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    margin: 0\n  },\n\n  /* Styles applied to the root element if `variant=\"body2\"`. */\n  body2: theme.typography.body2,\n\n  /* Styles applied to the root element if `variant=\"body1\"`. */\n  body1: theme.typography.body1,\n\n  /* Styles applied to the root element if `variant=\"caption\"`. */\n  caption: theme.typography.caption,\n\n  /* Styles applied to the root element if `variant=\"button\"`. */\n  button: theme.typography.button,\n\n  /* Styles applied to the root element if `variant=\"h1\"`. */\n  h1: theme.typography.h1,\n\n  /* Styles applied to the root element if `variant=\"h2\"`. */\n  h2: theme.typography.h2,\n\n  /* Styles applied to the root element if `variant=\"h3\"`. */\n  h3: theme.typography.h3,\n\n  /* Styles applied to the root element if `variant=\"h4\"`. */\n  h4: theme.typography.h4,\n\n  /* Styles applied to the root element if `variant=\"h5\"`. */\n  h5: theme.typography.h5,\n\n  /* Styles applied to the root element if `variant=\"h6\"`. */\n  h6: theme.typography.h6,\n\n  /* Styles applied to the root element if `variant=\"subtitle1\"`. */\n  subtitle1: theme.typography.subtitle1,\n\n  /* Styles applied to the root element if `variant=\"subtitle2\"`. */\n  subtitle2: theme.typography.subtitle2,\n\n  /* Styles applied to the root element if `variant=\"overline\"`. */\n  overline: theme.typography.overline,\n\n  /* Styles applied to the root element if `variant=\"inherit\"`. */\n  inherit: {},\n\n  /* Styles applied to the root element if `align=\"left\"`. */\n  alignLeft: {\n    textAlign: 'left'\n  },\n\n  /* Styles applied to the root element if `align=\"center\"`. */\n  alignCenter: {\n    textAlign: 'center'\n  },\n\n  /* Styles applied to the root element if `align=\"right\"`. */\n  alignRight: {\n    textAlign: 'right'\n  },\n\n  /* Styles applied to the root element if `align=\"justify\"`. */\n  alignJustify: {\n    textAlign: 'justify'\n  },\n\n  /* Styles applied to the root element if `nowrap={true}`. */\n  noWrap: {\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap'\n  },\n\n  /* Styles applied to the root element if `gutterBottom={true}`. */\n  gutterBottom: {\n    marginBottom: '0.35em'\n  },\n\n  /* Styles applied to the root element if `paragraph={true}`. */\n  paragraph: {\n    marginBottom: 16\n  },\n\n  /* Styles applied to the root element if `color=\"inherit\"`. */\n  colorInherit: {\n    color: 'inherit'\n  },\n\n  /* Styles applied to the root element if `color=\"primary\"`. */\n  colorPrimary: {\n    color: theme.palette.primary.main\n  },\n\n  /* Styles applied to the root element if `color=\"secondary\"`. */\n  colorSecondary: {\n    color: theme.palette.secondary.main\n  },\n\n  /* Styles applied to the root element if `color=\"textPrimary\"`. */\n  colorTextPrimary: {\n    color: theme.palette.text.primary\n  },\n\n  /* Styles applied to the root element if `color=\"textSecondary\"`. */\n  colorTextSecondary: {\n    color: theme.palette.text.secondary\n  },\n\n  /* Styles applied to the root element if `color=\"error\"`. */\n  colorError: {\n    color: theme.palette.error.main\n  },\n\n  /* Styles applied to the root element if `display=\"inline\"`. */\n  displayInline: {\n    display: 'inline'\n  },\n\n  /* Styles applied to the root element if `display=\"block\"`. */\n  displayBlock: {\n    display: 'block'\n  }\n});\nconst defaultVariantMapping = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p',\n  inherit: 'p'\n};\nconst Typography = /*#__PURE__*/React.forwardRef(function Typography(props, ref) {\n  const {\n    align = 'inherit',\n    classes,\n    className,\n    color = 'initial',\n    component,\n    display = 'initial',\n    gutterBottom = false,\n    noWrap = false,\n    paragraph = false,\n    variant = 'body1',\n    variantMapping = defaultVariantMapping\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"align\", \"classes\", \"className\", \"color\", \"component\", \"display\", \"gutterBottom\", \"noWrap\", \"paragraph\", \"variant\", \"variantMapping\"]);\n\n  const themeVariantsClasses = useThemeVariants(_extends({}, props, {\n    align,\n    color,\n    display,\n    gutterBottom,\n    noWrap,\n    paragraph,\n    variant,\n    variantMapping\n  }), 'MuiTypography');\n  const Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, classes[variant], themeVariantsClasses, className, color !== 'initial' && classes[`color${capitalize(color)}`], noWrap && classes.noWrap, gutterBottom && classes.gutterBottom, paragraph && classes.paragraph, align !== 'inherit' && classes[`align${capitalize(align)}`], display !== 'initial' && classes[`display${capitalize(display)}`]),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Typography.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Set the text-align on the component.\n   * @default 'inherit'\n   */\n  align: PropTypes.oneOf(['center', 'inherit', 'justify', 'left', 'right']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'initial'\n   */\n  color: PropTypes.oneOf(['error', 'inherit', 'initial', 'primary', 'secondary', 'textPrimary', 'textSecondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Controls the display type\n   * @default 'initial'\n   */\n  display: PropTypes.oneOf(['block', 'initial', 'inline']),\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   * @default false\n   */\n  gutterBottom: PropTypes.bool,\n\n  /**\n   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n   *\n   * Note that text overflow can only happen with block or inline-block level elements\n   * (the element needs to have a width in order to overflow).\n   * @default false\n   */\n  noWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   * @default false\n   */\n  paragraph: PropTypes.bool,\n\n  /**\n   * Applies the theme typography styles.\n   * @default 'body1'\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), PropTypes.string]),\n\n  /**\n   * The component maps the variant prop to a range of different HTML element types.\n   * For instance, subtitle1 to `<h6>`.\n   * If you wish to change that mapping, you can provide your own.\n   * Alternatively, you can use the `component` prop.\n   * @default {\n   *   h1: 'h1',\n   *   h2: 'h2',\n   *   h3: 'h3',\n   *   h4: 'h4',\n   *   h5: 'h5',\n   *   h6: 'h6',\n   *   subtitle1: 'h6',\n   *   subtitle2: 'h6',\n   *   body1: 'p',\n   *   body2: 'p',\n   *   inherit: 'p',\n   * }\n   */\n  variantMapping: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTypography'\n})(Typography);","map":{"version":3,"sources":["/home/nupur/infotabs-extension/infotabs-code/interface/frontend/node_modules/@material-ui/core/Typography/Typography.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","clsx","useThemeVariants","withStyles","capitalize","styles","theme","root","margin","body2","typography","body1","caption","button","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","overline","inherit","alignLeft","textAlign","alignCenter","alignRight","alignJustify","noWrap","overflow","textOverflow","whiteSpace","gutterBottom","marginBottom","paragraph","colorInherit","color","colorPrimary","palette","primary","main","colorSecondary","secondary","colorTextPrimary","text","colorTextSecondary","colorError","error","displayInline","display","displayBlock","defaultVariantMapping","Typography","forwardRef","props","ref","align","classes","className","component","variant","variantMapping","other","themeVariantsClasses","Component","createElement","process","env","NODE_ENV","propTypes","oneOf","children","node","object","string","elementType","bool","oneOfType","name"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { useThemeVariants } from '@material-ui/styles';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    margin: 0\n  },\n\n  /* Styles applied to the root element if `variant=\"body2\"`. */\n  body2: theme.typography.body2,\n\n  /* Styles applied to the root element if `variant=\"body1\"`. */\n  body1: theme.typography.body1,\n\n  /* Styles applied to the root element if `variant=\"caption\"`. */\n  caption: theme.typography.caption,\n\n  /* Styles applied to the root element if `variant=\"button\"`. */\n  button: theme.typography.button,\n\n  /* Styles applied to the root element if `variant=\"h1\"`. */\n  h1: theme.typography.h1,\n\n  /* Styles applied to the root element if `variant=\"h2\"`. */\n  h2: theme.typography.h2,\n\n  /* Styles applied to the root element if `variant=\"h3\"`. */\n  h3: theme.typography.h3,\n\n  /* Styles applied to the root element if `variant=\"h4\"`. */\n  h4: theme.typography.h4,\n\n  /* Styles applied to the root element if `variant=\"h5\"`. */\n  h5: theme.typography.h5,\n\n  /* Styles applied to the root element if `variant=\"h6\"`. */\n  h6: theme.typography.h6,\n\n  /* Styles applied to the root element if `variant=\"subtitle1\"`. */\n  subtitle1: theme.typography.subtitle1,\n\n  /* Styles applied to the root element if `variant=\"subtitle2\"`. */\n  subtitle2: theme.typography.subtitle2,\n\n  /* Styles applied to the root element if `variant=\"overline\"`. */\n  overline: theme.typography.overline,\n\n  /* Styles applied to the root element if `variant=\"inherit\"`. */\n  inherit: {},\n\n  /* Styles applied to the root element if `align=\"left\"`. */\n  alignLeft: {\n    textAlign: 'left'\n  },\n\n  /* Styles applied to the root element if `align=\"center\"`. */\n  alignCenter: {\n    textAlign: 'center'\n  },\n\n  /* Styles applied to the root element if `align=\"right\"`. */\n  alignRight: {\n    textAlign: 'right'\n  },\n\n  /* Styles applied to the root element if `align=\"justify\"`. */\n  alignJustify: {\n    textAlign: 'justify'\n  },\n\n  /* Styles applied to the root element if `nowrap={true}`. */\n  noWrap: {\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap'\n  },\n\n  /* Styles applied to the root element if `gutterBottom={true}`. */\n  gutterBottom: {\n    marginBottom: '0.35em'\n  },\n\n  /* Styles applied to the root element if `paragraph={true}`. */\n  paragraph: {\n    marginBottom: 16\n  },\n\n  /* Styles applied to the root element if `color=\"inherit\"`. */\n  colorInherit: {\n    color: 'inherit'\n  },\n\n  /* Styles applied to the root element if `color=\"primary\"`. */\n  colorPrimary: {\n    color: theme.palette.primary.main\n  },\n\n  /* Styles applied to the root element if `color=\"secondary\"`. */\n  colorSecondary: {\n    color: theme.palette.secondary.main\n  },\n\n  /* Styles applied to the root element if `color=\"textPrimary\"`. */\n  colorTextPrimary: {\n    color: theme.palette.text.primary\n  },\n\n  /* Styles applied to the root element if `color=\"textSecondary\"`. */\n  colorTextSecondary: {\n    color: theme.palette.text.secondary\n  },\n\n  /* Styles applied to the root element if `color=\"error\"`. */\n  colorError: {\n    color: theme.palette.error.main\n  },\n\n  /* Styles applied to the root element if `display=\"inline\"`. */\n  displayInline: {\n    display: 'inline'\n  },\n\n  /* Styles applied to the root element if `display=\"block\"`. */\n  displayBlock: {\n    display: 'block'\n  }\n});\nconst defaultVariantMapping = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p',\n  inherit: 'p'\n};\nconst Typography = /*#__PURE__*/React.forwardRef(function Typography(props, ref) {\n  const {\n    align = 'inherit',\n    classes,\n    className,\n    color = 'initial',\n    component,\n    display = 'initial',\n    gutterBottom = false,\n    noWrap = false,\n    paragraph = false,\n    variant = 'body1',\n    variantMapping = defaultVariantMapping\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"align\", \"classes\", \"className\", \"color\", \"component\", \"display\", \"gutterBottom\", \"noWrap\", \"paragraph\", \"variant\", \"variantMapping\"]);\n\n  const themeVariantsClasses = useThemeVariants(_extends({}, props, {\n    align,\n    color,\n    display,\n    gutterBottom,\n    noWrap,\n    paragraph,\n    variant,\n    variantMapping\n  }), 'MuiTypography');\n  const Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, classes[variant], themeVariantsClasses, className, color !== 'initial' && classes[`color${capitalize(color)}`], noWrap && classes.noWrap, gutterBottom && classes.gutterBottom, paragraph && classes.paragraph, align !== 'inherit' && classes[`align${capitalize(align)}`], display !== 'initial' && classes[`display${capitalize(display)}`]),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Typography.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Set the text-align on the component.\n   * @default 'inherit'\n   */\n  align: PropTypes.oneOf(['center', 'inherit', 'justify', 'left', 'right']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'initial'\n   */\n  color: PropTypes.oneOf(['error', 'inherit', 'initial', 'primary', 'secondary', 'textPrimary', 'textSecondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Controls the display type\n   * @default 'initial'\n   */\n  display: PropTypes.oneOf(['block', 'initial', 'inline']),\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   * @default false\n   */\n  gutterBottom: PropTypes.bool,\n\n  /**\n   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n   *\n   * Note that text overflow can only happen with block or inline-block level elements\n   * (the element needs to have a width in order to overflow).\n   * @default false\n   */\n  noWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   * @default false\n   */\n  paragraph: PropTypes.bool,\n\n  /**\n   * Applies the theme typography styles.\n   * @default 'body1'\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), PropTypes.string]),\n\n  /**\n   * The component maps the variant prop to a range of different HTML element types.\n   * For instance, subtitle1 to `<h6>`.\n   * If you wish to change that mapping, you can provide your own.\n   * Alternatively, you can use the `component` prop.\n   * @default {\n   *   h1: 'h1',\n   *   h2: 'h2',\n   *   h3: 'h3',\n   *   h4: 'h4',\n   *   h5: 'h5',\n   *   h6: 'h6',\n   *   subtitle1: 'h6',\n   *   subtitle2: 'h6',\n   *   body1: 'p',\n   *   body2: 'p',\n   *   inherit: 'p',\n   * }\n   */\n  variantMapping: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTypography'\n})(Typography);"]},"metadata":{},"sourceType":"module"}