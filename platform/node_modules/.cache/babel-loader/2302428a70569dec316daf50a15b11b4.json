{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from './ListContext';\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    listStyle: 'none',\n    margin: 0,\n    padding: 0,\n    position: 'relative'\n  },\n\n  /* Styles applied to the root element unless `disablePadding={true}`. */\n  padding: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n\n  /* Styles applied to the root element if dense. */\n  dense: {},\n\n  /* Styles applied to the root element if a `subheader` is provided. */\n  subheader: {\n    paddingTop: 0\n  }\n};\nconst List = /*#__PURE__*/React.forwardRef(function List(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    component: Component = 'ul',\n    dense = false,\n    disablePadding = false,\n    subheader\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"classes\", \"className\", \"component\", \"dense\", \"disablePadding\", \"subheader\"]);\n\n  const context = React.useMemo(() => ({\n    dense\n  }), [dense]);\n  return /*#__PURE__*/React.createElement(ListContext.Provider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, dense && classes.dense, !disablePadding && classes.padding, subheader && classes.subheader),\n    ref: ref\n  }, other), subheader, children));\n});\nprocess.env.NODE_ENV !== \"production\" ? List.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, compact vertical padding designed for keyboard and mouse input will be used for\n   * the list and list items.\n   * The prop is available to descendant components as the `dense` context.\n   * @default false\n   */\n  dense: PropTypes.bool,\n\n  /**\n   * If `true`, vertical padding will be removed from the list.\n   * @default false\n   */\n  disablePadding: PropTypes.bool,\n\n  /**\n   * The content of the subheader, normally `ListSubheader`.\n   */\n  subheader: PropTypes.node\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiList'\n})(List);","map":{"version":3,"sources":["/home/nupur/infotabs-extension/infotabs-code/interface/frontend/node_modules/@material-ui/core/List/List.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","clsx","withStyles","ListContext","styles","root","listStyle","margin","padding","position","paddingTop","paddingBottom","dense","subheader","List","forwardRef","props","ref","children","classes","className","component","Component","disablePadding","other","context","useMemo","createElement","Provider","value","process","env","NODE_ENV","propTypes","node","object","string","elementType","bool","name"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from './ListContext';\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    listStyle: 'none',\n    margin: 0,\n    padding: 0,\n    position: 'relative'\n  },\n\n  /* Styles applied to the root element unless `disablePadding={true}`. */\n  padding: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n\n  /* Styles applied to the root element if dense. */\n  dense: {},\n\n  /* Styles applied to the root element if a `subheader` is provided. */\n  subheader: {\n    paddingTop: 0\n  }\n};\nconst List = /*#__PURE__*/React.forwardRef(function List(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    component: Component = 'ul',\n    dense = false,\n    disablePadding = false,\n    subheader\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"classes\", \"className\", \"component\", \"dense\", \"disablePadding\", \"subheader\"]);\n\n  const context = React.useMemo(() => ({\n    dense\n  }), [dense]);\n  return /*#__PURE__*/React.createElement(ListContext.Provider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, dense && classes.dense, !disablePadding && classes.padding, subheader && classes.subheader),\n    ref: ref\n  }, other), subheader, children));\n});\nprocess.env.NODE_ENV !== \"production\" ? List.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, compact vertical padding designed for keyboard and mouse input will be used for\n   * the list and list items.\n   * The prop is available to descendant components as the `dense` context.\n   * @default false\n   */\n  dense: PropTypes.bool,\n\n  /**\n   * If `true`, vertical padding will be removed from the list.\n   * @default false\n   */\n  disablePadding: PropTypes.bool,\n\n  /**\n   * The content of the subheader, normally `ListSubheader`.\n   */\n  subheader: PropTypes.node\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiList'\n})(List);"]},"metadata":{},"sourceType":"module"}