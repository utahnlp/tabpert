{"ast":null,"code":"var _jsxFileName = \"/home/nupur/infotabs-extension/infotabs-code/interface/frontend/src/components/Tables.js\";\nimport React, { Component } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nclass Tables extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: '',\n      original: '',\n      A: '',\n      B: '',\n      C: ''\n    };\n  }\n\n  componentDidMount() {\n    this.getTables();\n  }\n\n  getTables() {\n    console.log('called');\n    fetch(`/api/table?id=${this.props.tableid}`).then(res => res.json()).then(data => {\n      this.setState({\n        title: data.title,\n        'original': data.original,\n        'A': data['A'],\n        'B': data.B,\n        'C': data.C\n      });\n    });\n  }\n\n  hashCode(str) {\n    var hash = 0,\n        i,\n        chr;\n\n    for (i = 0; i < str.length; i++) {\n      chr = str.charCodeAt(i);\n      hash = (hash << 5) - hash + chr;\n      hash |= 0; // Convert to 32bit integer\n    }\n\n    return hash;\n  }\n\n  tableRows(pairs, type) {\n    return Object.keys(pairs).map(key => {\n      return /*#__PURE__*/React.createElement(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 54\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 70\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 75\n        }\n      }, key)), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 103\n        }\n      }, /*#__PURE__*/React.createElement(Droppable, {\n        droppableId: type + '_' + key,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 9\n        }\n      }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n        ref: provided.innerRef\n      }, provided.droppableProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 17\n        }\n      }), pairs[key].map((value, id) => {\n        return /*#__PURE__*/React.createElement(Draggable, {\n          draggableId: type + '_' + key + id,\n          index: id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 29\n          }\n        }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n          ref: provided.innerRef\n        }, provided.draggableProps, provided.dragHandleProps, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 37\n          }\n        }), /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 67\n          }\n        }, value)));\n      }))))));\n    });\n  }\n\n  reorder(list, startIndex, endIndex) {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  }\n\n  /**\n   * Moves an item from one list to another list.\n   */\n  move(source, destination, droppableSource, droppableDestination) {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n    destClone.splice(droppableDestination.index, 0, removed);\n    const result = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n    return result;\n  }\n\n  onDragEnd(result) {\n    const {\n      source,\n      destination\n    } = result; // dropped outside the list\n\n    if (!destination) {\n      return;\n    }\n\n    const sInd = +source.droppableId;\n    const dInd = +destination.droppableId;\n\n    if (sInd === dInd) {\n      const items = this.reorder(this.state[sInd], source.index, destination.index);\n      const newState = [...this.state];\n      newState[sInd] = items;\n      this.setState(newState);\n    } else {\n      const result = this.move(this.state[sInd], this.state[dInd], source, destination);\n      const newState = [...this.state];\n      newState[sInd] = result[sInd];\n      newState[dInd] = result[dInd];\n      this.setState(newState.filter(group => group.length));\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }\n    }, this.state.title)), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }\n    }, this.tableRows(this.state.original, 'original')), /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }\n    }, this.tableRows(this.state.A, 'A')), /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }\n    }, this.tableRows(this.state.B, 'B')), /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }, this.tableRows(this.state.C, 'C')))));\n  }\n\n}\n\nexport default Tables;","map":{"version":3,"sources":["/home/nupur/infotabs-extension/infotabs-code/interface/frontend/src/components/Tables.js"],"names":["React","Component","DragDropContext","Droppable","Draggable","Container","Row","Col","Tables","constructor","props","state","title","original","A","B","C","componentDidMount","getTables","console","log","fetch","tableid","then","res","json","data","setState","hashCode","str","hash","i","chr","length","charCodeAt","tableRows","pairs","type","Object","keys","map","key","provided","snapshot","innerRef","droppableProps","value","id","draggableProps","dragHandleProps","reorder","list","startIndex","endIndex","result","Array","from","removed","splice","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","onDragEnd","sInd","dInd","items","newState","filter","group","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport {Container, Row, Col} from 'react-bootstrap';\n\nclass Tables extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {title: '', original: '', A: '', B: '', C: ''}\n    }\n\n    componentDidMount() {\n        this.getTables();\n    }\n    \n    getTables() {\n        console.log('called')\n        fetch(`/api/table?id=${this.props.tableid}`).then(res => res.json()).then(data => {this.setState({title: data.title, 'original': data.original, 'A': data['A'], 'B': data.B, 'C': data.C})})\n    }\n    \n    hashCode(str) {\n        var hash = 0, i, chr;\n        for (i = 0; i < str.length; i++) {\n            chr = str.charCodeAt(i);\n            hash = ((hash << 5) - hash) + chr;\n            hash |= 0; // Convert to 32bit integer\n        }\n        return hash;\n    }\n    tableRows(pairs, type) {\n        return(Object.keys(pairs).map(key => {return(<Container><Row><Col><strong>{key}</strong></Col><Col>\n        <Droppable droppableId={type + '_' + key}>\n            {(provided, snapshot) => (\n                <div ref={provided.innerRef} {...provided.droppableProps}>\n                    {pairs[key].map((value, id) => {\n                        return(\n                            <Draggable draggableId={type + '_' + key + id} index={id}>\n                                {(provided, snapshot) => (\n                                    <div ref={provided.innerRef} {...provided.draggableProps}\n                                    {...provided.dragHandleProps}><Row>{value}</Row></div>\n                                )}\n                            </Draggable>\n                        )\n                    })}\n                </div>\n            )}\n        </Droppable>\n        </Col></Row></Container>)}))\n    }\n\n    reorder(list, startIndex, endIndex) {\n        const result = Array.from(list);\n        const [removed] = result.splice(startIndex, 1);\n        result.splice(endIndex, 0, removed);\n      \n        return result;\n      };\n      \n      /**\n       * Moves an item from one list to another list.\n       */\n    move(source, destination, droppableSource, droppableDestination) {\n        const sourceClone = Array.from(source);\n        const destClone = Array.from(destination);\n        const [removed] = sourceClone.splice(droppableSource.index, 1);\n      \n        destClone.splice(droppableDestination.index, 0, removed);\n      \n        const result = {};\n        result[droppableSource.droppableId] = sourceClone;\n        result[droppableDestination.droppableId] = destClone;\n      \n        return result;\n      };\n\n    onDragEnd(result) {\n        const { source, destination } = result;\n    \n        // dropped outside the list\n        if (!destination) {\n          return;\n        }\n        const sInd = +source.droppableId;\n        const dInd = +destination.droppableId;\n    \n        if (sInd === dInd) {\n          const items = this.reorder(this.state[sInd], source.index, destination.index);\n          const newState = [...this.state];\n          newState[sInd] = items;\n          this.setState(newState);\n        } else {\n          const result = this.move(this.state[sInd], this.state[dInd], source, destination);\n          const newState = [...this.state];\n          newState[sInd] = result[sInd];\n          newState[dInd] = result[dInd];\n    \n          this.setState(newState.filter(group => group.length));\n        }\n      }\n    \n    render() {\n        return(\n            <Container >\n                <DragDropContext onDragEnd={this.onDragEnd}>\n                <Row className=\"justify-content-center\">\n                    <h1>{this.state.title}</h1>\n                </Row>\n                <Row>\n                <Col md={3}>\n                {this.tableRows(this.state.original, 'original')}\n                </Col>\n                <Col md={3}>\n                {this.tableRows(this.state.A, 'A')}\n                </Col>\n                <Col md={3}>\n                {this.tableRows(this.state.B, 'B')}\n                </Col>\n                <Col md={3}>\n                {this.tableRows(this.state.C, 'C')}\n                </Col>\n                </Row>\n                </DragDropContext>\n            </Container>\n        );\n    }\n}\n\nexport default Tables;"]},"metadata":{},"sourceType":"module"}