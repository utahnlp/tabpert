{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles } from '../styles';\nimport Popper from '../Popper';\nimport ListSubheader from '../ListSubheader';\nimport Paper from '../Paper';\nimport IconButton from '../IconButton';\nimport Chip from '../Chip';\nimport CloseIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport useAutocomplete, { createFilterOptions } from '../useAutocomplete';\nexport { createFilterOptions };\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    '&$focused $clearIndicatorDirty': {\n      visibility: 'visible'\n    },\n\n    /* Avoid double tap issue on iOS */\n    '@media (pointer: fine)': {\n      '&:hover $clearIndicatorDirty': {\n        visibility: 'visible'\n      }\n    }\n  },\n\n  /* Styles applied to the root element if `fullWidth={true}`. */\n  fullWidth: {\n    width: '100%'\n  },\n\n  /* Pseudo-class applied to the root element if focused. */\n  focused: {},\n\n  /* Styles applied to the tag elements, e.g. the chips. */\n  tag: {\n    margin: 3,\n    maxWidth: 'calc(100% - 6px)'\n  },\n\n  /* Styles applied to the tag elements, e.g. the chips if `size=\"small\"`. */\n  tagSizeSmall: {\n    margin: 2,\n    maxWidth: 'calc(100% - 4px)'\n  },\n\n  /* Styles applied when the popup icon is rendered. */\n  hasPopupIcon: {},\n\n  /* Styles applied when the clear icon is rendered. */\n  hasClearIcon: {},\n\n  /* Styles applied to the Input element. */\n  inputRoot: {\n    flexWrap: 'wrap',\n    '$hasPopupIcon &, $hasClearIcon &': {\n      paddingRight: 26 + 4\n    },\n    '$hasPopupIcon$hasClearIcon &': {\n      paddingRight: 52 + 4\n    },\n    '& $input': {\n      width: 0,\n      minWidth: 30\n    },\n    '&[class*=\"MuiInput-root\"]': {\n      paddingBottom: 1,\n      '& $input': {\n        padding: 4\n      },\n      '& $input:first-child': {\n        padding: '6px 0'\n      }\n    },\n    '&[class*=\"MuiInput-root\"][class*=\"MuiInput-marginDense\"]': {\n      '& $input': {\n        padding: '2px 4px 3px'\n      },\n      '& $input:first-child': {\n        padding: '1px 0 4px'\n      }\n    },\n    '&[class*=\"MuiOutlinedInput-root\"]': {\n      padding: 9,\n      '$hasPopupIcon &, $hasClearIcon &': {\n        paddingRight: 26 + 4 + 9\n      },\n      '$hasPopupIcon$hasClearIcon &': {\n        paddingRight: 52 + 4 + 9\n      },\n      '& $input': {\n        padding: '7.5px 4px'\n      },\n      '& $input:first-child': {\n        paddingLeft: 6\n      },\n      '& $endAdornment': {\n        right: 9\n      }\n    },\n    '&[class*=\"MuiOutlinedInput-root\"][class*=\"MuiOutlinedInput-marginDense\"]': {\n      padding: 6,\n      '& $input': {\n        padding: '2.5px 4px'\n      }\n    },\n    '&[class*=\"MuiFilledInput-root\"]': {\n      paddingTop: 19,\n      paddingLeft: 8,\n      '$hasPopupIcon &, $hasClearIcon &': {\n        paddingRight: 26 + 4 + 9\n      },\n      '$hasPopupIcon$hasClearIcon &': {\n        paddingRight: 52 + 4 + 9\n      },\n      '& $input': {\n        padding: '7px 4px'\n      },\n      '& $endAdornment': {\n        right: 9\n      }\n    },\n    '&[class*=\"MuiFilledInput-root\"][class*=\"MuiFilledInput-marginDense\"]': {\n      paddingBottom: 1,\n      '& $input': {\n        padding: '2.5px 4px'\n      }\n    }\n  },\n\n  /* Styles applied to the input element. */\n  input: {\n    flexGrow: 1,\n    textOverflow: 'ellipsis',\n    opacity: 0\n  },\n\n  /* Styles applied to the input element if tag focused. */\n  inputFocused: {\n    opacity: 1\n  },\n\n  /* Styles applied to the endAdornment element. */\n  endAdornment: {\n    // We use a position absolute to support wrapping tags.\n    position: 'absolute',\n    right: 0,\n    top: 'calc(50% - 14px)' // Center vertically\n\n  },\n\n  /* Styles applied to the clear indicator. */\n  clearIndicator: {\n    marginRight: -2,\n    padding: 4,\n    visibility: 'hidden'\n  },\n\n  /* Styles applied to the clear indicator if the input is dirty. */\n  clearIndicatorDirty: {},\n\n  /* Styles applied to the popup indicator. */\n  popupIndicator: {\n    padding: 2,\n    marginRight: -2\n  },\n\n  /* Styles applied to the popup indicator if the popup is open. */\n  popupIndicatorOpen: {\n    transform: 'rotate(180deg)'\n  },\n\n  /* Styles applied to the popper element. */\n  popper: {\n    zIndex: theme.zIndex.modal\n  },\n\n  /* Styles applied to the popper element if `disablePortal={true}`. */\n  popperDisablePortal: {\n    position: 'absolute'\n  },\n\n  /* Styles applied to the `Paper` component. */\n  paper: _extends({}, theme.typography.body1, {\n    overflow: 'auto',\n    margin: '4px 0'\n  }),\n\n  /* Styles applied to the `listbox` component. */\n  listbox: {\n    listStyle: 'none',\n    margin: 0,\n    padding: '8px 0',\n    maxHeight: '40vh',\n    overflow: 'auto'\n  },\n\n  /* Styles applied to the loading wrapper. */\n  loading: {\n    color: theme.palette.text.secondary,\n    padding: '14px 16px'\n  },\n\n  /* Styles applied to the no option wrapper. */\n  noOptions: {\n    color: theme.palette.text.secondary,\n    padding: '14px 16px'\n  },\n\n  /* Styles applied to the option elements. */\n  option: {\n    minHeight: 48,\n    display: 'flex',\n    overflow: 'hidden',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    cursor: 'pointer',\n    paddingTop: 6,\n    boxSizing: 'border-box',\n    outline: '0',\n    WebkitTapHighlightColor: 'transparent',\n    paddingBottom: 6,\n    paddingLeft: 16,\n    paddingRight: 16,\n    [theme.breakpoints.up('sm')]: {\n      minHeight: 'auto'\n    },\n    '&[aria-selected=\"true\"]': {\n      backgroundColor: theme.palette.action.selected\n    },\n    '&[data-focus=\"true\"]': {\n      backgroundColor: theme.palette.action.hover\n    },\n    '&:active': {\n      backgroundColor: theme.palette.action.selected\n    },\n    '&[aria-disabled=\"true\"]': {\n      opacity: theme.palette.action.disabledOpacity,\n      pointerEvents: 'none'\n    }\n  },\n\n  /* Styles applied to the group's label elements. */\n  groupLabel: {\n    backgroundColor: theme.palette.background.paper,\n    top: -8\n  },\n\n  /* Styles applied to the group's ul elements. */\n  groupUl: {\n    padding: 0,\n    '& $option': {\n      paddingLeft: 24\n    }\n  }\n});\n\nfunction DisablePortal(props) {\n  // eslint-disable-next-line react/prop-types\n  const other = _objectWithoutPropertiesLoose(props, [\"anchorEl\", \"open\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", other);\n}\n\nvar _ref = /*#__PURE__*/React.createElement(CloseIcon, {\n  fontSize: \"small\"\n});\n\nvar _ref2 = /*#__PURE__*/React.createElement(ArrowDropDownIcon, null);\n\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(props, ref) {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  const {\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    ChipProps,\n    classes,\n    className,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    clearText = 'Clear',\n    closeIcon = _ref,\n    closeText = 'Close',\n    debug = false,\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled = false,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    disablePortal = false,\n    filterSelectedOptions = false,\n    forcePopupIcon = 'auto',\n    freeSolo = false,\n    fullWidth = false,\n    getLimitTagsText = more => `+${more}`,\n    getOptionLabel = option => {\n      var _option$label;\n\n      return (_option$label = option.label) !== null && _option$label !== void 0 ? _option$label : option;\n    },\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    includeInputInList = false,\n    limitTags = -1,\n    ListboxComponent = 'ul',\n    ListboxProps,\n    loading = false,\n    loadingText = 'Loadingâ€¦',\n    multiple = false,\n    noOptionsText = 'No options',\n    openOnFocus = false,\n    openText = 'Open',\n    PaperComponent = Paper,\n    PopperComponent: PopperComponentProp = Popper,\n    popupIcon = _ref2,\n    renderGroup: renderGroupProp,\n    renderInput,\n    renderOption: renderOptionProp,\n    renderTags,\n    selectOnFocus = !props.freeSolo,\n    size = 'medium'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"ChipProps\", \"classes\", \"className\", \"clearOnBlur\", \"clearOnEscape\", \"clearText\", \"closeIcon\", \"closeText\", \"debug\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disabledItemsFocusable\", \"disableListWrap\", \"disablePortal\", \"filterOptions\", \"filterSelectedOptions\", \"forcePopupIcon\", \"freeSolo\", \"fullWidth\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionLabel\", \"getOptionSelected\", \"groupBy\", \"handleHomeEndKeys\", \"id\", \"includeInputInList\", \"inputValue\", \"limitTags\", \"ListboxComponent\", \"ListboxProps\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onHighlightChange\", \"onInputChange\", \"onOpen\", \"open\", \"openOnFocus\", \"openText\", \"options\", \"PaperComponent\", \"PopperComponent\", \"popupIcon\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"selectOnFocus\", \"size\", \"value\"]);\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n\n  const PopperComponent = disablePortal ? DisablePortal : PopperComponentProp;\n  const {\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    id,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete(_extends({}, props, {\n    componentName: 'Autocomplete'\n  }));\n  let startAdornment;\n\n  if (multiple && value.length > 0) {\n    const getCustomizedTagProps = params => _extends({\n      className: clsx(classes.tag, size === 'small' && classes.tagSizeSmall),\n      disabled\n    }, getTagProps(params));\n\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps);\n    } else {\n      startAdornment = value.map((option, index) => /*#__PURE__*/React.createElement(Chip, _extends({\n        label: getOptionLabel(option),\n        size: size\n      }, getCustomizedTagProps({\n        index\n      }), ChipProps)));\n    }\n  }\n\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    const more = startAdornment.length - limitTags;\n\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push( /*#__PURE__*/React.createElement(\"span\", {\n        className: classes.tag,\n        key: startAdornment.length\n      }, getLimitTagsText(more)));\n    }\n  }\n\n  const defaultRenderGroup = params => /*#__PURE__*/React.createElement(\"li\", {\n    key: params.key\n  }, /*#__PURE__*/React.createElement(ListSubheader, {\n    className: classes.groupLabel,\n    component: \"div\"\n  }, params.group), /*#__PURE__*/React.createElement(\"ul\", {\n    className: classes.groupUl\n  }, params.children));\n\n  const renderGroup = renderGroupProp || defaultRenderGroup;\n\n  const defaultRenderOption = (props2, option) => /*#__PURE__*/React.createElement(\"li\", props2, getOptionLabel(option));\n\n  const renderOption = renderOptionProp || defaultRenderOption;\n\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption(_extends({}, optionProps, {\n      className: classes.option\n    }), option, {\n      selected: optionProps['aria-selected'],\n      inputValue\n    });\n  };\n\n  const hasClearIcon = !disableClearable && !disabled;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref,\n    className: clsx(classes.root, className, focused && classes.focused, fullWidth && classes.fullWidth, hasClearIcon && classes.hasClearIcon, hasPopupIcon && classes.hasPopupIcon)\n  }, getRootProps(other)), renderInput({\n    id,\n    disabled,\n    fullWidth: true,\n    size: size === 'small' ? 'small' : undefined,\n    InputLabelProps: getInputLabelProps(),\n    InputProps: {\n      ref: setAnchorEl,\n      className: classes.inputRoot,\n      startAdornment,\n      endAdornment: /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.endAdornment\n      }, hasClearIcon ? /*#__PURE__*/React.createElement(IconButton, _extends({}, getClearProps(), {\n        \"aria-label\": clearText,\n        title: clearText,\n        className: clsx(classes.clearIndicator, dirty && classes.clearIndicatorDirty)\n      }), closeIcon) : null, hasPopupIcon ? /*#__PURE__*/React.createElement(IconButton, _extends({}, getPopupIndicatorProps(), {\n        disabled: disabled,\n        \"aria-label\": popupOpen ? closeText : openText,\n        title: popupOpen ? closeText : openText,\n        className: clsx(classes.popupIndicator, popupOpen && classes.popupIndicatorOpen)\n      }), popupIcon) : null)\n    },\n    inputProps: _extends({\n      className: clsx(classes.input, focusedTag === -1 && classes.inputFocused),\n      disabled\n    }, getInputProps())\n  })), popupOpen && anchorEl ? /*#__PURE__*/React.createElement(PopperComponent, {\n    className: clsx(classes.popper, disablePortal && classes.popperDisablePortal),\n    style: {\n      width: anchorEl ? anchorEl.clientWidth : null\n    },\n    role: \"presentation\",\n    anchorEl: anchorEl,\n    open: true\n  }, /*#__PURE__*/React.createElement(PaperComponent, {\n    className: classes.paper\n  }, loading && groupedOptions.length === 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.loading\n  }, loadingText) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.noOptions\n  }, noOptionsText) : null, groupedOptions.length > 0 ? /*#__PURE__*/React.createElement(ListboxComponent, _extends({\n    className: classes.listbox\n  }, getListboxProps(), ListboxProps), groupedOptions.map((option, index) => {\n    if (groupBy) {\n      return renderGroup({\n        key: option.key,\n        group: option.group,\n        children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))\n      });\n    }\n\n    return renderListOption(option, index);\n  })) : null)) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the portion of the selected suggestion that has not been typed by the user,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   * @default false\n   */\n  autoComplete: PropTypes.bool,\n\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default false\n   */\n  autoHighlight: PropTypes.bool,\n\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   * @default false\n   */\n  autoSelect: PropTypes.bool,\n\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   * @default false\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n\n  /**\n   * Props applied to the [`Chip`](/api/chip/) element.\n   */\n  ChipProps: PropTypes.object,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the input's text will be cleared on blur if no value is selected.\n   *\n   * Set to `true` if you want to help the user enter a new value.\n   * Set to `false` if you want to help the user resume his search.\n   * @default !props.freeSolo\n   */\n  clearOnBlur: PropTypes.bool,\n\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   * @default false\n   */\n  clearOnEscape: PropTypes.bool,\n\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n\n  /**\n   * The icon to display in place of the default close icon.\n   * @default <CloseIcon fontSize=\"small\" />\n   */\n  closeIcon: PropTypes.node,\n\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n\n  /**\n   * If `true`, the popup will ignore the blur event if the input is filled.\n   * You can inspect the popup markup with your browser tools.\n   * Consider this option when you need to customize the component.\n   * @default false\n   */\n  debug: PropTypes.bool,\n\n  /**\n   * The default input value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   * @default false\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the input will be disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n\n  /**\n   * The `Popper` content will be inside the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * A filter function that determines the options that are eligible.\n   *\n   * @param {T[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {T[]}\n   */\n  filterOptions: PropTypes.func,\n\n  /**\n   * If `true`, hide the selected options from the list box.\n   * @default false\n   */\n  filterSelectedOptions: PropTypes.bool,\n\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {T} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * @param {T} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n\n  /**\n   * Used to determine if an option is selected, considering the current value.\n   * Uses strict equality by default.\n   *\n   * @param {T} option The option to test.\n   * @param {T} value The value to test against.\n   * @returns {boolean}\n   */\n  getOptionSelected: PropTypes.func,\n\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {T} options The options to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n\n  /**\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n   * It should move focus to the first option and last option, respectively.\n   * @default !props.freeSolo\n   */\n  handleHomeEndKeys: PropTypes.bool,\n\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide this prop. It falls back to a randomly generated id.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the highlight can move to the input.\n   * @default false\n   */\n  includeInputInList: PropTypes.bool,\n\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: PropTypes.number,\n\n  /**\n   * The component used to render the listbox.\n   * @default 'ul'\n   */\n  ListboxComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the Listbox element.\n   */\n  ListboxProps: PropTypes.object,\n\n  /**\n   * If `true`, the component is in a loading state.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Loadingâ€¦'\n   */\n  loadingText: PropTypes.node,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {T|T[]} value The new value of the component.\n   * @param {string} reason One of \"create-option\", \"select-option\", \"remove-option\", \"blur\" or \"clear\".\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"select-option\"`, `\"remove-option\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {T} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`.\n   */\n  onHighlightChange: PropTypes.func,\n\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control the popup` open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * If `true`, the popup will open on input focus.\n   * @default false\n   */\n  openOnFocus: PropTypes.bool,\n\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array.isRequired,\n\n  /**\n   * The component used to render the body of the popup.\n   * @default Paper\n   */\n  PaperComponent: PropTypes.elementType,\n\n  /**\n   * The component used to position the popup.\n   * @default Popper\n   */\n  PopperComponent: PropTypes.elementType,\n\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n\n  /**\n   * Render the group.\n   *\n   * @param {any} option The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {T} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n\n  /**\n   * Render the selected value.\n   *\n   * @param {T[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n\n  /**\n   * If `true`, the input's text will be selected on focus.\n   * It helps the user clear the selected value.\n   * @default !props.freeSolo\n   */\n  selectOnFocus: PropTypes.bool,\n\n  /**\n   * The size of the autocomplete.\n   * @default 'medium'\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `getOptionSelected` prop.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAutocomplete'\n})(Autocomplete);","map":{"version":3,"sources":["/home/nupur/infotabs-extension/infotabs-code/interface/frontend/node_modules/@material-ui/core/Autocomplete/Autocomplete.js"],"names":["_objectWithoutPropertiesLoose","_extends","React","PropTypes","clsx","withStyles","Popper","ListSubheader","Paper","IconButton","Chip","CloseIcon","ArrowDropDownIcon","useAutocomplete","createFilterOptions","styles","theme","root","visibility","fullWidth","width","focused","tag","margin","maxWidth","tagSizeSmall","hasPopupIcon","hasClearIcon","inputRoot","flexWrap","paddingRight","minWidth","paddingBottom","padding","paddingLeft","right","paddingTop","input","flexGrow","textOverflow","opacity","inputFocused","endAdornment","position","top","clearIndicator","marginRight","clearIndicatorDirty","popupIndicator","popupIndicatorOpen","transform","popper","zIndex","modal","popperDisablePortal","paper","typography","body1","overflow","listbox","listStyle","maxHeight","loading","color","palette","text","secondary","noOptions","option","minHeight","display","justifyContent","alignItems","cursor","boxSizing","outline","WebkitTapHighlightColor","breakpoints","up","backgroundColor","action","selected","hover","disabledOpacity","pointerEvents","groupLabel","background","groupUl","DisablePortal","props","other","createElement","_ref","fontSize","_ref2","Autocomplete","forwardRef","ref","autoComplete","autoHighlight","autoSelect","blurOnSelect","ChipProps","classes","className","clearOnBlur","freeSolo","clearOnEscape","clearText","closeIcon","closeText","debug","defaultValue","multiple","disableClearable","disableCloseOnSelect","disabled","disabledItemsFocusable","disableListWrap","disablePortal","filterSelectedOptions","forcePopupIcon","getLimitTagsText","more","getOptionLabel","_option$label","label","groupBy","handleHomeEndKeys","includeInputInList","limitTags","ListboxComponent","ListboxProps","loadingText","noOptionsText","openOnFocus","openText","PaperComponent","PopperComponent","PopperComponentProp","popupIcon","renderGroup","renderGroupProp","renderInput","renderOption","renderOptionProp","renderTags","selectOnFocus","size","getRootProps","getInputProps","getInputLabelProps","getPopupIndicatorProps","getClearProps","getTagProps","getListboxProps","getOptionProps","value","dirty","id","popupOpen","focusedTag","anchorEl","setAnchorEl","inputValue","groupedOptions","componentName","startAdornment","length","getCustomizedTagProps","params","map","index","Array","isArray","splice","push","key","defaultRenderGroup","component","group","children","defaultRenderOption","props2","renderListOption","optionProps","Fragment","undefined","InputLabelProps","InputProps","title","inputProps","style","clientWidth","role","open","options","option2","index2","process","env","NODE_ENV","propTypes","bool","oneOfType","oneOf","object","string","node","any","filterOptions","func","getOptionDisabled","getOptionSelected","number","elementType","onChange","onClose","onHighlightChange","onInputChange","onOpen","array","isRequired","name"],"mappings":"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","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles } from '../styles';\nimport Popper from '../Popper';\nimport ListSubheader from '../ListSubheader';\nimport Paper from '../Paper';\nimport IconButton from '../IconButton';\nimport Chip from '../Chip';\nimport CloseIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport useAutocomplete, { createFilterOptions } from '../useAutocomplete';\nexport { createFilterOptions };\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    '&$focused $clearIndicatorDirty': {\n      visibility: 'visible'\n    },\n\n    /* Avoid double tap issue on iOS */\n    '@media (pointer: fine)': {\n      '&:hover $clearIndicatorDirty': {\n        visibility: 'visible'\n      }\n    }\n  },\n\n  /* Styles applied to the root element if `fullWidth={true}`. */\n  fullWidth: {\n    width: '100%'\n  },\n\n  /* Pseudo-class applied to the root element if focused. */\n  focused: {},\n\n  /* Styles applied to the tag elements, e.g. the chips. */\n  tag: {\n    margin: 3,\n    maxWidth: 'calc(100% - 6px)'\n  },\n\n  /* Styles applied to the tag elements, e.g. the chips if `size=\"small\"`. */\n  tagSizeSmall: {\n    margin: 2,\n    maxWidth: 'calc(100% - 4px)'\n  },\n\n  /* Styles applied when the popup icon is rendered. */\n  hasPopupIcon: {},\n\n  /* Styles applied when the clear icon is rendered. */\n  hasClearIcon: {},\n\n  /* Styles applied to the Input element. */\n  inputRoot: {\n    flexWrap: 'wrap',\n    '$hasPopupIcon &, $hasClearIcon &': {\n      paddingRight: 26 + 4\n    },\n    '$hasPopupIcon$hasClearIcon &': {\n      paddingRight: 52 + 4\n    },\n    '& $input': {\n      width: 0,\n      minWidth: 30\n    },\n    '&[class*=\"MuiInput-root\"]': {\n      paddingBottom: 1,\n      '& $input': {\n        padding: 4\n      },\n      '& $input:first-child': {\n        padding: '6px 0'\n      }\n    },\n    '&[class*=\"MuiInput-root\"][class*=\"MuiInput-marginDense\"]': {\n      '& $input': {\n        padding: '2px 4px 3px'\n      },\n      '& $input:first-child': {\n        padding: '1px 0 4px'\n      }\n    },\n    '&[class*=\"MuiOutlinedInput-root\"]': {\n      padding: 9,\n      '$hasPopupIcon &, $hasClearIcon &': {\n        paddingRight: 26 + 4 + 9\n      },\n      '$hasPopupIcon$hasClearIcon &': {\n        paddingRight: 52 + 4 + 9\n      },\n      '& $input': {\n        padding: '7.5px 4px'\n      },\n      '& $input:first-child': {\n        paddingLeft: 6\n      },\n      '& $endAdornment': {\n        right: 9\n      }\n    },\n    '&[class*=\"MuiOutlinedInput-root\"][class*=\"MuiOutlinedInput-marginDense\"]': {\n      padding: 6,\n      '& $input': {\n        padding: '2.5px 4px'\n      }\n    },\n    '&[class*=\"MuiFilledInput-root\"]': {\n      paddingTop: 19,\n      paddingLeft: 8,\n      '$hasPopupIcon &, $hasClearIcon &': {\n        paddingRight: 26 + 4 + 9\n      },\n      '$hasPopupIcon$hasClearIcon &': {\n        paddingRight: 52 + 4 + 9\n      },\n      '& $input': {\n        padding: '7px 4px'\n      },\n      '& $endAdornment': {\n        right: 9\n      }\n    },\n    '&[class*=\"MuiFilledInput-root\"][class*=\"MuiFilledInput-marginDense\"]': {\n      paddingBottom: 1,\n      '& $input': {\n        padding: '2.5px 4px'\n      }\n    }\n  },\n\n  /* Styles applied to the input element. */\n  input: {\n    flexGrow: 1,\n    textOverflow: 'ellipsis',\n    opacity: 0\n  },\n\n  /* Styles applied to the input element if tag focused. */\n  inputFocused: {\n    opacity: 1\n  },\n\n  /* Styles applied to the endAdornment element. */\n  endAdornment: {\n    // We use a position absolute to support wrapping tags.\n    position: 'absolute',\n    right: 0,\n    top: 'calc(50% - 14px)' // Center vertically\n\n  },\n\n  /* Styles applied to the clear indicator. */\n  clearIndicator: {\n    marginRight: -2,\n    padding: 4,\n    visibility: 'hidden'\n  },\n\n  /* Styles applied to the clear indicator if the input is dirty. */\n  clearIndicatorDirty: {},\n\n  /* Styles applied to the popup indicator. */\n  popupIndicator: {\n    padding: 2,\n    marginRight: -2\n  },\n\n  /* Styles applied to the popup indicator if the popup is open. */\n  popupIndicatorOpen: {\n    transform: 'rotate(180deg)'\n  },\n\n  /* Styles applied to the popper element. */\n  popper: {\n    zIndex: theme.zIndex.modal\n  },\n\n  /* Styles applied to the popper element if `disablePortal={true}`. */\n  popperDisablePortal: {\n    position: 'absolute'\n  },\n\n  /* Styles applied to the `Paper` component. */\n  paper: _extends({}, theme.typography.body1, {\n    overflow: 'auto',\n    margin: '4px 0'\n  }),\n\n  /* Styles applied to the `listbox` component. */\n  listbox: {\n    listStyle: 'none',\n    margin: 0,\n    padding: '8px 0',\n    maxHeight: '40vh',\n    overflow: 'auto'\n  },\n\n  /* Styles applied to the loading wrapper. */\n  loading: {\n    color: theme.palette.text.secondary,\n    padding: '14px 16px'\n  },\n\n  /* Styles applied to the no option wrapper. */\n  noOptions: {\n    color: theme.palette.text.secondary,\n    padding: '14px 16px'\n  },\n\n  /* Styles applied to the option elements. */\n  option: {\n    minHeight: 48,\n    display: 'flex',\n    overflow: 'hidden',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    cursor: 'pointer',\n    paddingTop: 6,\n    boxSizing: 'border-box',\n    outline: '0',\n    WebkitTapHighlightColor: 'transparent',\n    paddingBottom: 6,\n    paddingLeft: 16,\n    paddingRight: 16,\n    [theme.breakpoints.up('sm')]: {\n      minHeight: 'auto'\n    },\n    '&[aria-selected=\"true\"]': {\n      backgroundColor: theme.palette.action.selected\n    },\n    '&[data-focus=\"true\"]': {\n      backgroundColor: theme.palette.action.hover\n    },\n    '&:active': {\n      backgroundColor: theme.palette.action.selected\n    },\n    '&[aria-disabled=\"true\"]': {\n      opacity: theme.palette.action.disabledOpacity,\n      pointerEvents: 'none'\n    }\n  },\n\n  /* Styles applied to the group's label elements. */\n  groupLabel: {\n    backgroundColor: theme.palette.background.paper,\n    top: -8\n  },\n\n  /* Styles applied to the group's ul elements. */\n  groupUl: {\n    padding: 0,\n    '& $option': {\n      paddingLeft: 24\n    }\n  }\n});\n\nfunction DisablePortal(props) {\n  // eslint-disable-next-line react/prop-types\n  const other = _objectWithoutPropertiesLoose(props, [\"anchorEl\", \"open\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", other);\n}\n\nvar _ref = /*#__PURE__*/React.createElement(CloseIcon, {\n  fontSize: \"small\"\n});\n\nvar _ref2 = /*#__PURE__*/React.createElement(ArrowDropDownIcon, null);\n\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(props, ref) {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  const {\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    ChipProps,\n    classes,\n    className,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    clearText = 'Clear',\n    closeIcon = _ref,\n    closeText = 'Close',\n    debug = false,\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled = false,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    disablePortal = false,\n    filterSelectedOptions = false,\n    forcePopupIcon = 'auto',\n    freeSolo = false,\n    fullWidth = false,\n    getLimitTagsText = more => `+${more}`,\n    getOptionLabel = option => {\n      var _option$label;\n\n      return (_option$label = option.label) !== null && _option$label !== void 0 ? _option$label : option;\n    },\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    includeInputInList = false,\n    limitTags = -1,\n    ListboxComponent = 'ul',\n    ListboxProps,\n    loading = false,\n    loadingText = 'Loadingâ€¦',\n    multiple = false,\n    noOptionsText = 'No options',\n    openOnFocus = false,\n    openText = 'Open',\n    PaperComponent = Paper,\n    PopperComponent: PopperComponentProp = Popper,\n    popupIcon = _ref2,\n    renderGroup: renderGroupProp,\n    renderInput,\n    renderOption: renderOptionProp,\n    renderTags,\n    selectOnFocus = !props.freeSolo,\n    size = 'medium'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"ChipProps\", \"classes\", \"className\", \"clearOnBlur\", \"clearOnEscape\", \"clearText\", \"closeIcon\", \"closeText\", \"debug\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disabledItemsFocusable\", \"disableListWrap\", \"disablePortal\", \"filterOptions\", \"filterSelectedOptions\", \"forcePopupIcon\", \"freeSolo\", \"fullWidth\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionLabel\", \"getOptionSelected\", \"groupBy\", \"handleHomeEndKeys\", \"id\", \"includeInputInList\", \"inputValue\", \"limitTags\", \"ListboxComponent\", \"ListboxProps\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onHighlightChange\", \"onInputChange\", \"onOpen\", \"open\", \"openOnFocus\", \"openText\", \"options\", \"PaperComponent\", \"PopperComponent\", \"popupIcon\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"selectOnFocus\", \"size\", \"value\"]);\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n\n  const PopperComponent = disablePortal ? DisablePortal : PopperComponentProp;\n  const {\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    id,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete(_extends({}, props, {\n    componentName: 'Autocomplete'\n  }));\n  let startAdornment;\n\n  if (multiple && value.length > 0) {\n    const getCustomizedTagProps = params => _extends({\n      className: clsx(classes.tag, size === 'small' && classes.tagSizeSmall),\n      disabled\n    }, getTagProps(params));\n\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps);\n    } else {\n      startAdornment = value.map((option, index) => /*#__PURE__*/React.createElement(Chip, _extends({\n        label: getOptionLabel(option),\n        size: size\n      }, getCustomizedTagProps({\n        index\n      }), ChipProps)));\n    }\n  }\n\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    const more = startAdornment.length - limitTags;\n\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push( /*#__PURE__*/React.createElement(\"span\", {\n        className: classes.tag,\n        key: startAdornment.length\n      }, getLimitTagsText(more)));\n    }\n  }\n\n  const defaultRenderGroup = params => /*#__PURE__*/React.createElement(\"li\", {\n    key: params.key\n  }, /*#__PURE__*/React.createElement(ListSubheader, {\n    className: classes.groupLabel,\n    component: \"div\"\n  }, params.group), /*#__PURE__*/React.createElement(\"ul\", {\n    className: classes.groupUl\n  }, params.children));\n\n  const renderGroup = renderGroupProp || defaultRenderGroup;\n\n  const defaultRenderOption = (props2, option) => /*#__PURE__*/React.createElement(\"li\", props2, getOptionLabel(option));\n\n  const renderOption = renderOptionProp || defaultRenderOption;\n\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption(_extends({}, optionProps, {\n      className: classes.option\n    }), option, {\n      selected: optionProps['aria-selected'],\n      inputValue\n    });\n  };\n\n  const hasClearIcon = !disableClearable && !disabled;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref,\n    className: clsx(classes.root, className, focused && classes.focused, fullWidth && classes.fullWidth, hasClearIcon && classes.hasClearIcon, hasPopupIcon && classes.hasPopupIcon)\n  }, getRootProps(other)), renderInput({\n    id,\n    disabled,\n    fullWidth: true,\n    size: size === 'small' ? 'small' : undefined,\n    InputLabelProps: getInputLabelProps(),\n    InputProps: {\n      ref: setAnchorEl,\n      className: classes.inputRoot,\n      startAdornment,\n      endAdornment: /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.endAdornment\n      }, hasClearIcon ? /*#__PURE__*/React.createElement(IconButton, _extends({}, getClearProps(), {\n        \"aria-label\": clearText,\n        title: clearText,\n        className: clsx(classes.clearIndicator, dirty && classes.clearIndicatorDirty)\n      }), closeIcon) : null, hasPopupIcon ? /*#__PURE__*/React.createElement(IconButton, _extends({}, getPopupIndicatorProps(), {\n        disabled: disabled,\n        \"aria-label\": popupOpen ? closeText : openText,\n        title: popupOpen ? closeText : openText,\n        className: clsx(classes.popupIndicator, popupOpen && classes.popupIndicatorOpen)\n      }), popupIcon) : null)\n    },\n    inputProps: _extends({\n      className: clsx(classes.input, focusedTag === -1 && classes.inputFocused),\n      disabled\n    }, getInputProps())\n  })), popupOpen && anchorEl ? /*#__PURE__*/React.createElement(PopperComponent, {\n    className: clsx(classes.popper, disablePortal && classes.popperDisablePortal),\n    style: {\n      width: anchorEl ? anchorEl.clientWidth : null\n    },\n    role: \"presentation\",\n    anchorEl: anchorEl,\n    open: true\n  }, /*#__PURE__*/React.createElement(PaperComponent, {\n    className: classes.paper\n  }, loading && groupedOptions.length === 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.loading\n  }, loadingText) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.noOptions\n  }, noOptionsText) : null, groupedOptions.length > 0 ? /*#__PURE__*/React.createElement(ListboxComponent, _extends({\n    className: classes.listbox\n  }, getListboxProps(), ListboxProps), groupedOptions.map((option, index) => {\n    if (groupBy) {\n      return renderGroup({\n        key: option.key,\n        group: option.group,\n        children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))\n      });\n    }\n\n    return renderListOption(option, index);\n  })) : null)) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the portion of the selected suggestion that has not been typed by the user,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   * @default false\n   */\n  autoComplete: PropTypes.bool,\n\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default false\n   */\n  autoHighlight: PropTypes.bool,\n\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   * @default false\n   */\n  autoSelect: PropTypes.bool,\n\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   * @default false\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n\n  /**\n   * Props applied to the [`Chip`](/api/chip/) element.\n   */\n  ChipProps: PropTypes.object,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the input's text will be cleared on blur if no value is selected.\n   *\n   * Set to `true` if you want to help the user enter a new value.\n   * Set to `false` if you want to help the user resume his search.\n   * @default !props.freeSolo\n   */\n  clearOnBlur: PropTypes.bool,\n\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   * @default false\n   */\n  clearOnEscape: PropTypes.bool,\n\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n\n  /**\n   * The icon to display in place of the default close icon.\n   * @default <CloseIcon fontSize=\"small\" />\n   */\n  closeIcon: PropTypes.node,\n\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n\n  /**\n   * If `true`, the popup will ignore the blur event if the input is filled.\n   * You can inspect the popup markup with your browser tools.\n   * Consider this option when you need to customize the component.\n   * @default false\n   */\n  debug: PropTypes.bool,\n\n  /**\n   * The default input value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   * @default false\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the input will be disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n\n  /**\n   * The `Popper` content will be inside the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * A filter function that determines the options that are eligible.\n   *\n   * @param {T[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {T[]}\n   */\n  filterOptions: PropTypes.func,\n\n  /**\n   * If `true`, hide the selected options from the list box.\n   * @default false\n   */\n  filterSelectedOptions: PropTypes.bool,\n\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {T} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * @param {T} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n\n  /**\n   * Used to determine if an option is selected, considering the current value.\n   * Uses strict equality by default.\n   *\n   * @param {T} option The option to test.\n   * @param {T} value The value to test against.\n   * @returns {boolean}\n   */\n  getOptionSelected: PropTypes.func,\n\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {T} options The options to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n\n  /**\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n   * It should move focus to the first option and last option, respectively.\n   * @default !props.freeSolo\n   */\n  handleHomeEndKeys: PropTypes.bool,\n\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide this prop. It falls back to a randomly generated id.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the highlight can move to the input.\n   * @default false\n   */\n  includeInputInList: PropTypes.bool,\n\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: PropTypes.number,\n\n  /**\n   * The component used to render the listbox.\n   * @default 'ul'\n   */\n  ListboxComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the Listbox element.\n   */\n  ListboxProps: PropTypes.object,\n\n  /**\n   * If `true`, the component is in a loading state.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Loadingâ€¦'\n   */\n  loadingText: PropTypes.node,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {T|T[]} value The new value of the component.\n   * @param {string} reason One of \"create-option\", \"select-option\", \"remove-option\", \"blur\" or \"clear\".\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"select-option\"`, `\"remove-option\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {T} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`.\n   */\n  onHighlightChange: PropTypes.func,\n\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control the popup` open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * If `true`, the popup will open on input focus.\n   * @default false\n   */\n  openOnFocus: PropTypes.bool,\n\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array.isRequired,\n\n  /**\n   * The component used to render the body of the popup.\n   * @default Paper\n   */\n  PaperComponent: PropTypes.elementType,\n\n  /**\n   * The component used to position the popup.\n   * @default Popper\n   */\n  PopperComponent: PropTypes.elementType,\n\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n\n  /**\n   * Render the group.\n   *\n   * @param {any} option The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {T} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n\n  /**\n   * Render the selected value.\n   *\n   * @param {T[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n\n  /**\n   * If `true`, the input's text will be selected on focus.\n   * It helps the user clear the selected value.\n   * @default !props.freeSolo\n   */\n  selectOnFocus: PropTypes.bool,\n\n  /**\n   * The size of the autocomplete.\n   * @default 'medium'\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `getOptionSelected` prop.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAutocomplete'\n})(Autocomplete);"]},"metadata":{},"sourceType":"module"}