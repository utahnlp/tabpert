{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { isFilled, isAdornedStart } from '../InputBase/utils';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nimport isMuiElement from '../utils/isMuiElement';\nimport FormControlContext from './FormControlContext';\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-flex',\n    flexDirection: 'column',\n    position: 'relative',\n    // Reset fieldset default style.\n    minWidth: 0,\n    padding: 0,\n    margin: 0,\n    border: 0,\n    verticalAlign: 'top' // Fix alignment issue on Safari.\n\n  },\n\n  /* Styles applied to the root element if `margin=\"normal\"`. */\n  marginNormal: {\n    marginTop: 16,\n    marginBottom: 8\n  },\n\n  /* Styles applied to the root element if `margin=\"dense\"`. */\n  marginDense: {\n    marginTop: 8,\n    marginBottom: 4\n  },\n\n  /* Styles applied to the root element if `fullWidth={true}`. */\n  fullWidth: {\n    width: '100%'\n  }\n};\n/**\n * Provides context such as filled/focused/error/required for form inputs.\n * Relying on the context provides high flexibility and ensures that the state always stays\n * consistent across the children of the `FormControl`.\n * This context is used by the following components:\n *\n *  - FormLabel\n *  - FormHelperText\n *  - Input\n *  - InputLabel\n *\n * You can find one composition example below and more going to [the demos](/components/text-fields/#components).\n *\n * ```jsx\n * <FormControl>\n *   <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\n *   <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\n *   <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\n * </FormControl>\n * ```\n *\n * ⚠️ Only one `InputBase` can be used within a FormControl because it create visual inconsistencies.\n * For instance, only one input can be focused at the same time, the state shouldn't be shared.\n */\n\nconst FormControl = /*#__PURE__*/React.forwardRef(function FormControl(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    color = 'primary',\n    component: Component = 'div',\n    disabled = false,\n    error = false,\n    fullWidth = false,\n    focused: visuallyFocused,\n    hiddenLabel = false,\n    margin = 'none',\n    required = false,\n    size,\n    variant = 'standard'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"classes\", \"className\", \"color\", \"component\", \"disabled\", \"error\", \"fullWidth\", \"focused\", \"hiddenLabel\", \"margin\", \"required\", \"size\", \"variant\"]);\n\n  const [adornedStart, setAdornedStart] = React.useState(() => {\n    // We need to iterate through the children and find the Input in order\n    // to fully support server-side rendering.\n    let initialAdornedStart = false;\n\n    if (children) {\n      React.Children.forEach(children, child => {\n        if (!isMuiElement(child, ['Input', 'Select'])) {\n          return;\n        }\n\n        const input = isMuiElement(child, ['Select']) ? child.props.input : child;\n\n        if (input && isAdornedStart(input.props)) {\n          initialAdornedStart = true;\n        }\n      });\n    }\n\n    return initialAdornedStart;\n  });\n  const [filled, setFilled] = React.useState(() => {\n    // We need to iterate through the children and find the Input in order\n    // to fully support server-side rendering.\n    let initialFilled = false;\n\n    if (children) {\n      React.Children.forEach(children, child => {\n        if (!isMuiElement(child, ['Input', 'Select'])) {\n          return;\n        }\n\n        if (isFilled(child.props, true)) {\n          initialFilled = true;\n        }\n      });\n    }\n\n    return initialFilled;\n  });\n  const [focusedState, setFocused] = React.useState(false);\n  const focused = visuallyFocused !== undefined ? visuallyFocused : focusedState;\n\n  if (disabled && focused) {\n    setFocused(false);\n  }\n\n  let registerEffect;\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const registeredInput = React.useRef(false);\n\n    registerEffect = () => {\n      if (registeredInput.current) {\n        console.error(['Material-UI: There are multiple `InputBase` components inside a FormControl.', 'This creates visual inconsistencies, only use one `InputBase`.'].join('\\n'));\n      }\n\n      registeredInput.current = true;\n      return () => {\n        registeredInput.current = false;\n      };\n    };\n  }\n\n  const onFilled = React.useCallback(() => {\n    setFilled(true);\n  }, []);\n  const onEmpty = React.useCallback(() => {\n    setFilled(false);\n  }, []);\n  const childContext = {\n    adornedStart,\n    setAdornedStart,\n    color,\n    disabled,\n    error,\n    filled,\n    focused,\n    fullWidth,\n    hiddenLabel,\n    margin: (size === 'small' ? 'dense' : undefined) || margin,\n    onBlur: () => {\n      setFocused(false);\n    },\n    onEmpty,\n    onFilled,\n    onFocus: () => {\n      setFocused(true);\n    },\n    registerEffect,\n    required,\n    variant\n  };\n  return /*#__PURE__*/React.createElement(FormControlContext.Provider, {\n    value: childContext\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, margin !== 'none' && classes[`margin${capitalize(margin)}`], fullWidth && classes.fullWidth),\n    ref: ref\n  }, other), children));\n});\nprocess.env.NODE_ENV !== \"production\" ? FormControl.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The contents of the form control.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'primary'\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the label, input and helper text should be displayed in a disabled state.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label should be displayed in an error state.\n   * @default false\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the component will be displayed in focused state.\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * If `true`, the component will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * If `true`, the label will be hidden.\n   * This is used to increase density for a `FilledInput`.\n   * Be sure to add `aria-label` to the `input` element.\n   * @default false\n   */\n  hiddenLabel: PropTypes.bool,\n\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   * @default 'none'\n   */\n  margin: PropTypes.oneOf(['dense', 'none', 'normal']),\n\n  /**\n   * If `true`, the label will indicate that the input is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the text field.\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFormControl'\n})(FormControl);","map":{"version":3,"sources":["/home/nupur/infotabs-extension/infotabs-code/interface/frontend/node_modules/@material-ui/core/FormControl/FormControl.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","clsx","isFilled","isAdornedStart","withStyles","capitalize","isMuiElement","FormControlContext","styles","root","display","flexDirection","position","minWidth","padding","margin","border","verticalAlign","marginNormal","marginTop","marginBottom","marginDense","fullWidth","width","FormControl","forwardRef","props","ref","children","classes","className","color","component","Component","disabled","error","focused","visuallyFocused","hiddenLabel","required","size","variant","other","adornedStart","setAdornedStart","useState","initialAdornedStart","Children","forEach","child","input","filled","setFilled","initialFilled","focusedState","setFocused","undefined","registerEffect","process","env","NODE_ENV","registeredInput","useRef","current","console","join","onFilled","useCallback","onEmpty","childContext","onBlur","onFocus","createElement","Provider","value","propTypes","node","object","string","oneOf","elementType","bool","name"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { isFilled, isAdornedStart } from '../InputBase/utils';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nimport isMuiElement from '../utils/isMuiElement';\nimport FormControlContext from './FormControlContext';\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-flex',\n    flexDirection: 'column',\n    position: 'relative',\n    // Reset fieldset default style.\n    minWidth: 0,\n    padding: 0,\n    margin: 0,\n    border: 0,\n    verticalAlign: 'top' // Fix alignment issue on Safari.\n\n  },\n\n  /* Styles applied to the root element if `margin=\"normal\"`. */\n  marginNormal: {\n    marginTop: 16,\n    marginBottom: 8\n  },\n\n  /* Styles applied to the root element if `margin=\"dense\"`. */\n  marginDense: {\n    marginTop: 8,\n    marginBottom: 4\n  },\n\n  /* Styles applied to the root element if `fullWidth={true}`. */\n  fullWidth: {\n    width: '100%'\n  }\n};\n/**\n * Provides context such as filled/focused/error/required for form inputs.\n * Relying on the context provides high flexibility and ensures that the state always stays\n * consistent across the children of the `FormControl`.\n * This context is used by the following components:\n *\n *  - FormLabel\n *  - FormHelperText\n *  - Input\n *  - InputLabel\n *\n * You can find one composition example below and more going to [the demos](/components/text-fields/#components).\n *\n * ```jsx\n * <FormControl>\n *   <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\n *   <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\n *   <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\n * </FormControl>\n * ```\n *\n * ⚠️ Only one `InputBase` can be used within a FormControl because it create visual inconsistencies.\n * For instance, only one input can be focused at the same time, the state shouldn't be shared.\n */\n\nconst FormControl = /*#__PURE__*/React.forwardRef(function FormControl(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    color = 'primary',\n    component: Component = 'div',\n    disabled = false,\n    error = false,\n    fullWidth = false,\n    focused: visuallyFocused,\n    hiddenLabel = false,\n    margin = 'none',\n    required = false,\n    size,\n    variant = 'standard'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"classes\", \"className\", \"color\", \"component\", \"disabled\", \"error\", \"fullWidth\", \"focused\", \"hiddenLabel\", \"margin\", \"required\", \"size\", \"variant\"]);\n\n  const [adornedStart, setAdornedStart] = React.useState(() => {\n    // We need to iterate through the children and find the Input in order\n    // to fully support server-side rendering.\n    let initialAdornedStart = false;\n\n    if (children) {\n      React.Children.forEach(children, child => {\n        if (!isMuiElement(child, ['Input', 'Select'])) {\n          return;\n        }\n\n        const input = isMuiElement(child, ['Select']) ? child.props.input : child;\n\n        if (input && isAdornedStart(input.props)) {\n          initialAdornedStart = true;\n        }\n      });\n    }\n\n    return initialAdornedStart;\n  });\n  const [filled, setFilled] = React.useState(() => {\n    // We need to iterate through the children and find the Input in order\n    // to fully support server-side rendering.\n    let initialFilled = false;\n\n    if (children) {\n      React.Children.forEach(children, child => {\n        if (!isMuiElement(child, ['Input', 'Select'])) {\n          return;\n        }\n\n        if (isFilled(child.props, true)) {\n          initialFilled = true;\n        }\n      });\n    }\n\n    return initialFilled;\n  });\n  const [focusedState, setFocused] = React.useState(false);\n  const focused = visuallyFocused !== undefined ? visuallyFocused : focusedState;\n\n  if (disabled && focused) {\n    setFocused(false);\n  }\n\n  let registerEffect;\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const registeredInput = React.useRef(false);\n\n    registerEffect = () => {\n      if (registeredInput.current) {\n        console.error(['Material-UI: There are multiple `InputBase` components inside a FormControl.', 'This creates visual inconsistencies, only use one `InputBase`.'].join('\\n'));\n      }\n\n      registeredInput.current = true;\n      return () => {\n        registeredInput.current = false;\n      };\n    };\n  }\n\n  const onFilled = React.useCallback(() => {\n    setFilled(true);\n  }, []);\n  const onEmpty = React.useCallback(() => {\n    setFilled(false);\n  }, []);\n  const childContext = {\n    adornedStart,\n    setAdornedStart,\n    color,\n    disabled,\n    error,\n    filled,\n    focused,\n    fullWidth,\n    hiddenLabel,\n    margin: (size === 'small' ? 'dense' : undefined) || margin,\n    onBlur: () => {\n      setFocused(false);\n    },\n    onEmpty,\n    onFilled,\n    onFocus: () => {\n      setFocused(true);\n    },\n    registerEffect,\n    required,\n    variant\n  };\n  return /*#__PURE__*/React.createElement(FormControlContext.Provider, {\n    value: childContext\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, margin !== 'none' && classes[`margin${capitalize(margin)}`], fullWidth && classes.fullWidth),\n    ref: ref\n  }, other), children));\n});\nprocess.env.NODE_ENV !== \"production\" ? FormControl.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The contents of the form control.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'primary'\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the label, input and helper text should be displayed in a disabled state.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label should be displayed in an error state.\n   * @default false\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the component will be displayed in focused state.\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * If `true`, the component will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * If `true`, the label will be hidden.\n   * This is used to increase density for a `FilledInput`.\n   * Be sure to add `aria-label` to the `input` element.\n   * @default false\n   */\n  hiddenLabel: PropTypes.bool,\n\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   * @default 'none'\n   */\n  margin: PropTypes.oneOf(['dense', 'none', 'normal']),\n\n  /**\n   * If `true`, the label will indicate that the input is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the text field.\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFormControl'\n})(FormControl);"]},"metadata":{},"sourceType":"module"}