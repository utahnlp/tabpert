{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\"; // Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves\n// to learn the context in which each easing should be used.\n\nexport const easing = {\n  // This is the most common easing curve.\n  easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',\n  // Objects enter the screen at full velocity from off-screen and\n  // slowly decelerate to a resting point.\n  easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',\n  // Objects leave the screen at full velocity. They do not decelerate when off-screen.\n  easeIn: 'cubic-bezier(0.4, 0, 1, 1)',\n  // The sharp curve is used by objects that may return to the screen at any time.\n  sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'\n}; // Follow https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations\n// to learn when use what timing\n\nexport const duration = {\n  shortest: 150,\n  shorter: 200,\n  short: 250,\n  // most basic recommended timing\n  standard: 300,\n  // this is to be used in complex animations\n  complex: 375,\n  // recommended when something is entering screen\n  enteringScreen: 225,\n  // recommended when something is leaving screen\n  leavingScreen: 195\n};\n\nfunction formatMs(milliseconds) {\n  return `${Math.round(milliseconds)}ms`;\n}\n\nexport function create(props = ['all'], options = {}) {\n  const {\n    duration: durationOption = duration.standard,\n    easing: easingOption = easing.easeInOut,\n    delay = 0\n  } = options,\n        other = _objectWithoutPropertiesLoose(options, [\"duration\", \"easing\", \"delay\"]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    const isString = value => typeof value === 'string'; // IE11 support, replace with Number.isNaN\n    // eslint-disable-next-line no-restricted-globals\n\n\n    const isNumber = value => !isNaN(parseFloat(value));\n\n    if (!isString(props) && !Array.isArray(props)) {\n      console.error('Material-UI: Argument \"props\" must be a string or Array.');\n    }\n\n    if (!isNumber(durationOption) && !isString(durationOption)) {\n      console.error(`Material-UI: Argument \"duration\" must be a number or a string but found ${durationOption}.`);\n    }\n\n    if (!isString(easingOption)) {\n      console.error('Material-UI: Argument \"easing\" must be a string.');\n    }\n\n    if (!isNumber(delay) && !isString(delay)) {\n      console.error('Material-UI: Argument \"delay\" must be a number or a string.');\n    }\n\n    if (Object.keys(other).length !== 0) {\n      console.error(`Material-UI: Unrecognized argument(s) [${Object.keys(other).join(',')}].`);\n    }\n  }\n\n  return (Array.isArray(props) ? props : [props]).map(animatedProp => `${animatedProp} ${typeof durationOption === 'string' ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === 'string' ? delay : formatMs(delay)}`).join(',');\n}\nexport function getAutoHeightDuration(height) {\n  if (!height) {\n    return 0;\n  }\n\n  const constant = height / 36; // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10\n\n  return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);\n}","map":{"version":3,"sources":["/home/nupur/infotabs-extension/infotabs-code/interface/frontend/node_modules/@material-ui/core/styles/transitions.js"],"names":["_objectWithoutPropertiesLoose","easing","easeInOut","easeOut","easeIn","sharp","duration","shortest","shorter","short","standard","complex","enteringScreen","leavingScreen","formatMs","milliseconds","Math","round","create","props","options","durationOption","easingOption","delay","other","process","env","NODE_ENV","isString","value","isNumber","isNaN","parseFloat","Array","isArray","console","error","Object","keys","length","join","map","animatedProp","getAutoHeightDuration","height","constant"],"mappings":"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","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\n// Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves\n// to learn the context in which each easing should be used.\nexport const easing = {\n  // This is the most common easing curve.\n  easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',\n  // Objects enter the screen at full velocity from off-screen and\n  // slowly decelerate to a resting point.\n  easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',\n  // Objects leave the screen at full velocity. They do not decelerate when off-screen.\n  easeIn: 'cubic-bezier(0.4, 0, 1, 1)',\n  // The sharp curve is used by objects that may return to the screen at any time.\n  sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'\n}; // Follow https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations\n// to learn when use what timing\n\nexport const duration = {\n  shortest: 150,\n  shorter: 200,\n  short: 250,\n  // most basic recommended timing\n  standard: 300,\n  // this is to be used in complex animations\n  complex: 375,\n  // recommended when something is entering screen\n  enteringScreen: 225,\n  // recommended when something is leaving screen\n  leavingScreen: 195\n};\n\nfunction formatMs(milliseconds) {\n  return `${Math.round(milliseconds)}ms`;\n}\n\nexport function create(props = ['all'], options = {}) {\n  const {\n    duration: durationOption = duration.standard,\n    easing: easingOption = easing.easeInOut,\n    delay = 0\n  } = options,\n        other = _objectWithoutPropertiesLoose(options, [\"duration\", \"easing\", \"delay\"]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    const isString = value => typeof value === 'string'; // IE11 support, replace with Number.isNaN\n    // eslint-disable-next-line no-restricted-globals\n\n\n    const isNumber = value => !isNaN(parseFloat(value));\n\n    if (!isString(props) && !Array.isArray(props)) {\n      console.error('Material-UI: Argument \"props\" must be a string or Array.');\n    }\n\n    if (!isNumber(durationOption) && !isString(durationOption)) {\n      console.error(`Material-UI: Argument \"duration\" must be a number or a string but found ${durationOption}.`);\n    }\n\n    if (!isString(easingOption)) {\n      console.error('Material-UI: Argument \"easing\" must be a string.');\n    }\n\n    if (!isNumber(delay) && !isString(delay)) {\n      console.error('Material-UI: Argument \"delay\" must be a number or a string.');\n    }\n\n    if (Object.keys(other).length !== 0) {\n      console.error(`Material-UI: Unrecognized argument(s) [${Object.keys(other).join(',')}].`);\n    }\n  }\n\n  return (Array.isArray(props) ? props : [props]).map(animatedProp => `${animatedProp} ${typeof durationOption === 'string' ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === 'string' ? delay : formatMs(delay)}`).join(',');\n}\nexport function getAutoHeightDuration(height) {\n  if (!height) {\n    return 0;\n  }\n\n  const constant = height / 36; // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10\n\n  return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);\n}"]},"metadata":{},"sourceType":"module"}