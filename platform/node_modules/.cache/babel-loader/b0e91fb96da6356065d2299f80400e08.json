{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'block',\n    textAlign: 'inherit',\n    width: '100%',\n    '&:hover $focusHighlight': {\n      opacity: theme.palette.action.hoverOpacity,\n      '@media (hover: none)': {\n        opacity: 0\n      }\n    },\n    '&$focusVisible $focusHighlight': {\n      opacity: theme.palette.action.focusOpacity\n    }\n  },\n\n  /* Pseudo-class applied to the ButtonBase root element if the action area is keyboard focused. */\n  focusVisible: {},\n\n  /* Styles applied to the overlay that covers the action area when it is keyboard focused. */\n  focusHighlight: {\n    overflow: 'hidden',\n    pointerEvents: 'none',\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    borderRadius: 'inherit',\n    opacity: 0,\n    backgroundColor: 'currentcolor',\n    transition: theme.transitions.create('opacity', {\n      duration: theme.transitions.duration.short\n    })\n  }\n});\nconst CardActionArea = /*#__PURE__*/React.forwardRef(function CardActionArea(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    focusVisibleClassName\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"classes\", \"className\", \"focusVisibleClassName\"]);\n\n  return /*#__PURE__*/React.createElement(ButtonBase, _extends({\n    className: clsx(classes.root, className),\n    focusVisibleClassName: clsx(focusVisibleClassName, classes.focusVisible),\n    ref: ref\n  }, other), children, /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.focusHighlight\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardActionArea.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  focusVisibleClassName: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardActionArea'\n})(CardActionArea);","map":{"version":3,"sources":["/home/nupur/infotabs-extension/infotabs-code/interface/frontend/node_modules/@material-ui/core/CardActionArea/CardActionArea.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","clsx","withStyles","ButtonBase","styles","theme","root","display","textAlign","width","opacity","palette","action","hoverOpacity","focusOpacity","focusVisible","focusHighlight","overflow","pointerEvents","position","top","right","bottom","left","borderRadius","backgroundColor","transition","transitions","create","duration","short","CardActionArea","forwardRef","props","ref","children","classes","className","focusVisibleClassName","other","createElement","process","env","NODE_ENV","propTypes","node","object","string","name"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    display: 'block',\n    textAlign: 'inherit',\n    width: '100%',\n    '&:hover $focusHighlight': {\n      opacity: theme.palette.action.hoverOpacity,\n      '@media (hover: none)': {\n        opacity: 0\n      }\n    },\n    '&$focusVisible $focusHighlight': {\n      opacity: theme.palette.action.focusOpacity\n    }\n  },\n\n  /* Pseudo-class applied to the ButtonBase root element if the action area is keyboard focused. */\n  focusVisible: {},\n\n  /* Styles applied to the overlay that covers the action area when it is keyboard focused. */\n  focusHighlight: {\n    overflow: 'hidden',\n    pointerEvents: 'none',\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    borderRadius: 'inherit',\n    opacity: 0,\n    backgroundColor: 'currentcolor',\n    transition: theme.transitions.create('opacity', {\n      duration: theme.transitions.duration.short\n    })\n  }\n});\nconst CardActionArea = /*#__PURE__*/React.forwardRef(function CardActionArea(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    focusVisibleClassName\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"classes\", \"className\", \"focusVisibleClassName\"]);\n\n  return /*#__PURE__*/React.createElement(ButtonBase, _extends({\n    className: clsx(classes.root, className),\n    focusVisibleClassName: clsx(focusVisibleClassName, classes.focusVisible),\n    ref: ref\n  }, other), children, /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.focusHighlight\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardActionArea.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  focusVisibleClassName: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardActionArea'\n})(CardActionArea);"]},"metadata":{},"sourceType":"module"}